/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SpxAccordion {
        "contentColor": string;
        "contentCustom": boolean;
        "contentText": string;
        "contentTextTag": string;
        "fontSize": string;
        "gap": string;
        "headerColor": string;
        "headerCustom": boolean;
        "headerGap": string;
        "headerText": string;
        "headerTextTag": string;
        "indicatorIcon": string;
        "styling": string;
    }
    interface SpxAnimate {
        "delay": number;
        "display": string;
        "duration": number;
        "ease": string;
        "once": boolean;
        "opacity": number;
        "stagger": number;
        "target": string;
        "viewport": boolean;
        "viewportMarginBottom": string;
        "viewportMarginLeft": string;
        "viewportMarginRight": string;
        "viewportMarginTop": string;
        "x": number;
        "y": number;
    }
    interface SpxClassToggle {
        "display": string;
        "local": string;
        "target": string;
        "toggle": string;
    }
    interface SpxEdit {
        "display": string;
        "editable": boolean;
        "name": string;
        "outline": string;
        "outlineFocus": string;
        "placeholder": string;
        "placeholderColor": string;
        "placeholderOpacity": string;
        "styling": string;
        "type": string;
    }
    interface SpxEditButton {
        "background": string;
        "backgroundDiscard": string;
        "border": string;
        "borderRadius": string;
        "color": string;
        "colorDiscard": string;
        "distanceX": string;
        "distanceY": string;
        "editId": string;
        "fontSize": string;
        "gap": string;
        "padding": string;
        "position": string;
        "styling": string;
        "test": boolean;
        "textDiscard": string;
        "textEdit": string;
        "textSave": string;
        "textSuccess": string;
        "type": string;
    }
    interface SpxGroup {
        "display": string;
    }
    interface SpxIcon {
        "icon": string;
        "type": string;
    }
    interface SpxIframe {
        "size": string;
        "src": string;
    }
    interface SpxImageComparison {
        "color": string;
        "iconColor": string;
        "srcAfter": string;
        "srcBefore": string;
        "start": number;
    }
    interface SpxLightbox {
        "display": string;
        "effect": string;
    }
    interface SpxLoader {
        "color": string;
        "speed": string;
    }
    interface SpxMasonry {
        "bpColumns": string;
        "bpColumnsObject": object;
        "columns": number;
        "gap": string;
        "imageSize": string;
        "images": string;
        "imagesSrc": string;
        "mobileFirst": boolean;
        /**
          * Wrapper for recalculation.
         */
        "recalc": () => Promise<void>;
        /**
          * Wrapper for reinit.
         */
        "restart": () => Promise<void>;
        "trueOrder": boolean;
        "useContainerForBreakpoints": boolean;
        "useOwnImageLoader": boolean;
        "waitForImages": boolean;
    }
    interface SpxMockup {
        "browserBackground": string;
        "browserUrlBarBackground": string;
        "browserUrlBarBorder": string;
        "color": string;
        "colorGalaxyS8": string;
        "colorGooglePixel": string;
        "colorIpadPro": string;
        "colorIphone8": string;
        "colorMacbook": string;
        "colorMacbookPro": string;
        "display": string;
        "imagePosition": string;
        "src": string;
        "type": string;
    }
    interface SpxNavigation {
        "childBorder": string;
        "childChildGap": string;
        "childGap": string;
        "childIcon": string;
        "childIndicatorGap": string;
        "childItemBackground": string;
        "childItemBackgroundHover": string;
        "childItemColor": string;
        "childItemColorHover": string;
        "childItemPadding": string;
        "childPlacement": string;
        "fontSize": string;
        "itemUnderline": boolean;
        "itemUnderlineHover": boolean;
        "menu": string;
        "mobile": number;
        "mobileIcon": string;
        "mobileItemBackground": string;
        "mobileItemBackgroundHover": string;
        "mobileItemColor": string;
        "mobileItemColorHover": string;
        "mobileItemNestedMarginLeft": string;
        "mobileItemPadding": string;
        "mobilePlacement": string;
        "parentItemBackground": string;
        "parentItemBackgroundHover": string;
        "parentItemColor": string;
        "parentItemColorHover": string;
        "parentItemGap": string;
        "parentItemPadding": string;
        "styling": string;
        "vertical": boolean;
    }
    interface SpxOffset {
        "display": string;
        "target": string;
    }
    interface SpxScrollspy {
        "contentClass": string;
        "display": string;
        "navClass": string;
        "offset": any;
        "target": string;
        "urlChange": boolean;
    }
    interface SpxSectionSingle {
        "containerMaxWidth": string;
        "content": boolean;
        "contentMarginTop": string;
        "date": boolean;
        "dateColor": string;
        "dateFontSize": string;
        "dateMarginTop": string;
        "image": boolean;
        "imageBorderRadius": string;
        "imageMaxHeight": string;
        "imageObjectPosition": string;
        "mobile": number;
        "post": string;
        "styling": string;
        "tableOfContents": boolean;
        "tableOfContentsBackground": string;
        "tableOfContentsBorder": string;
        "tableOfContentsBorderRadius": string;
        "tableOfContentsHeading": string;
        "tableOfContentsHeadingColor": string;
        "tableOfContentsHeadingFontSize": string;
        "tableOfContentsHeadingMarginBottom": string;
        "tableOfContentsItemColor": string;
        "tableOfContentsItemColorActive": string;
        "tableOfContentsItemGap": string;
        "tableOfContentsMarginTop": string;
        "tableOfContentsOffset": any;
        "tableOfContentsPadding": string;
        "titleColor": string;
        "titleFontSize": string;
        "titleMarginTop": string;
    }
    interface SpxShare {
        "fontSize": string;
        "itemBackgroundColor": string;
        "itemBorderRadius": string;
        "itemColor": string;
        "itemGap": string;
        "itemPadding": string;
        "itemSize": string;
        "styling": string;
        "target": string;
        "theme": string;
        "vertical": boolean;
    }
    interface SpxSnackbar {
        "animationDelay": string;
        "animationDuration": string;
        "background": string;
        "border": string;
        "borderRadius": string;
        "closeable": boolean;
        "color": string;
        "distanceX": string;
        "distanceY": string;
        "fixed": boolean;
        "fontSize": string;
        "padding": string;
        "position": string;
        "reverse": boolean;
        "size": string;
        "styling": string;
        "text": string;
    }
    interface SpxSnackbarToggle {
    }
    interface SpxTypewriter {
        "autoStart": boolean;
        "delay": any;
        "deleteSpeed": any;
        "display": string;
        "inner": boolean;
        "loop": boolean;
        /**
          * External method to start animation.
         */
        "start": () => Promise<void>;
        /**
          * External method to stop animation.
         */
        "stop": () => Promise<void>;
        "text": string;
    }
}
declare global {
    interface HTMLSpxAccordionElement extends Components.SpxAccordion, HTMLStencilElement {
    }
    var HTMLSpxAccordionElement: {
        prototype: HTMLSpxAccordionElement;
        new (): HTMLSpxAccordionElement;
    };
    interface HTMLSpxAnimateElement extends Components.SpxAnimate, HTMLStencilElement {
    }
    var HTMLSpxAnimateElement: {
        prototype: HTMLSpxAnimateElement;
        new (): HTMLSpxAnimateElement;
    };
    interface HTMLSpxClassToggleElement extends Components.SpxClassToggle, HTMLStencilElement {
    }
    var HTMLSpxClassToggleElement: {
        prototype: HTMLSpxClassToggleElement;
        new (): HTMLSpxClassToggleElement;
    };
    interface HTMLSpxEditElement extends Components.SpxEdit, HTMLStencilElement {
    }
    var HTMLSpxEditElement: {
        prototype: HTMLSpxEditElement;
        new (): HTMLSpxEditElement;
    };
    interface HTMLSpxEditButtonElement extends Components.SpxEditButton, HTMLStencilElement {
    }
    var HTMLSpxEditButtonElement: {
        prototype: HTMLSpxEditButtonElement;
        new (): HTMLSpxEditButtonElement;
    };
    interface HTMLSpxGroupElement extends Components.SpxGroup, HTMLStencilElement {
    }
    var HTMLSpxGroupElement: {
        prototype: HTMLSpxGroupElement;
        new (): HTMLSpxGroupElement;
    };
    interface HTMLSpxIconElement extends Components.SpxIcon, HTMLStencilElement {
    }
    var HTMLSpxIconElement: {
        prototype: HTMLSpxIconElement;
        new (): HTMLSpxIconElement;
    };
    interface HTMLSpxIframeElement extends Components.SpxIframe, HTMLStencilElement {
    }
    var HTMLSpxIframeElement: {
        prototype: HTMLSpxIframeElement;
        new (): HTMLSpxIframeElement;
    };
    interface HTMLSpxImageComparisonElement extends Components.SpxImageComparison, HTMLStencilElement {
    }
    var HTMLSpxImageComparisonElement: {
        prototype: HTMLSpxImageComparisonElement;
        new (): HTMLSpxImageComparisonElement;
    };
    interface HTMLSpxLightboxElement extends Components.SpxLightbox, HTMLStencilElement {
    }
    var HTMLSpxLightboxElement: {
        prototype: HTMLSpxLightboxElement;
        new (): HTMLSpxLightboxElement;
    };
    interface HTMLSpxLoaderElement extends Components.SpxLoader, HTMLStencilElement {
    }
    var HTMLSpxLoaderElement: {
        prototype: HTMLSpxLoaderElement;
        new (): HTMLSpxLoaderElement;
    };
    interface HTMLSpxMasonryElement extends Components.SpxMasonry, HTMLStencilElement {
    }
    var HTMLSpxMasonryElement: {
        prototype: HTMLSpxMasonryElement;
        new (): HTMLSpxMasonryElement;
    };
    interface HTMLSpxMockupElement extends Components.SpxMockup, HTMLStencilElement {
    }
    var HTMLSpxMockupElement: {
        prototype: HTMLSpxMockupElement;
        new (): HTMLSpxMockupElement;
    };
    interface HTMLSpxNavigationElement extends Components.SpxNavigation, HTMLStencilElement {
    }
    var HTMLSpxNavigationElement: {
        prototype: HTMLSpxNavigationElement;
        new (): HTMLSpxNavigationElement;
    };
    interface HTMLSpxOffsetElement extends Components.SpxOffset, HTMLStencilElement {
    }
    var HTMLSpxOffsetElement: {
        prototype: HTMLSpxOffsetElement;
        new (): HTMLSpxOffsetElement;
    };
    interface HTMLSpxScrollspyElement extends Components.SpxScrollspy, HTMLStencilElement {
    }
    var HTMLSpxScrollspyElement: {
        prototype: HTMLSpxScrollspyElement;
        new (): HTMLSpxScrollspyElement;
    };
    interface HTMLSpxSectionSingleElement extends Components.SpxSectionSingle, HTMLStencilElement {
    }
    var HTMLSpxSectionSingleElement: {
        prototype: HTMLSpxSectionSingleElement;
        new (): HTMLSpxSectionSingleElement;
    };
    interface HTMLSpxShareElement extends Components.SpxShare, HTMLStencilElement {
    }
    var HTMLSpxShareElement: {
        prototype: HTMLSpxShareElement;
        new (): HTMLSpxShareElement;
    };
    interface HTMLSpxSnackbarElement extends Components.SpxSnackbar, HTMLStencilElement {
    }
    var HTMLSpxSnackbarElement: {
        prototype: HTMLSpxSnackbarElement;
        new (): HTMLSpxSnackbarElement;
    };
    interface HTMLSpxSnackbarToggleElement extends Components.SpxSnackbarToggle, HTMLStencilElement {
    }
    var HTMLSpxSnackbarToggleElement: {
        prototype: HTMLSpxSnackbarToggleElement;
        new (): HTMLSpxSnackbarToggleElement;
    };
    interface HTMLSpxTypewriterElement extends Components.SpxTypewriter, HTMLStencilElement {
    }
    var HTMLSpxTypewriterElement: {
        prototype: HTMLSpxTypewriterElement;
        new (): HTMLSpxTypewriterElement;
    };
    interface HTMLElementTagNameMap {
        "spx-accordion": HTMLSpxAccordionElement;
        "spx-animate": HTMLSpxAnimateElement;
        "spx-class-toggle": HTMLSpxClassToggleElement;
        "spx-edit": HTMLSpxEditElement;
        "spx-edit-button": HTMLSpxEditButtonElement;
        "spx-group": HTMLSpxGroupElement;
        "spx-icon": HTMLSpxIconElement;
        "spx-iframe": HTMLSpxIframeElement;
        "spx-image-comparison": HTMLSpxImageComparisonElement;
        "spx-lightbox": HTMLSpxLightboxElement;
        "spx-loader": HTMLSpxLoaderElement;
        "spx-masonry": HTMLSpxMasonryElement;
        "spx-mockup": HTMLSpxMockupElement;
        "spx-navigation": HTMLSpxNavigationElement;
        "spx-offset": HTMLSpxOffsetElement;
        "spx-scrollspy": HTMLSpxScrollspyElement;
        "spx-section-single": HTMLSpxSectionSingleElement;
        "spx-share": HTMLSpxShareElement;
        "spx-snackbar": HTMLSpxSnackbarElement;
        "spx-snackbar-toggle": HTMLSpxSnackbarToggleElement;
        "spx-typewriter": HTMLSpxTypewriterElement;
    }
}
declare namespace LocalJSX {
    interface SpxAccordion {
        "contentColor"?: string;
        "contentCustom"?: boolean;
        "contentText"?: string;
        "contentTextTag"?: string;
        "fontSize"?: string;
        "gap"?: string;
        "headerColor"?: string;
        "headerCustom"?: boolean;
        "headerGap"?: string;
        "headerText"?: string;
        "headerTextTag"?: string;
        "indicatorIcon"?: string;
        "styling"?: string;
    }
    interface SpxAnimate {
        "delay"?: number;
        "display"?: string;
        "duration"?: number;
        "ease"?: string;
        "once"?: boolean;
        "opacity"?: number;
        "stagger"?: number;
        "target"?: string;
        "viewport"?: boolean;
        "viewportMarginBottom"?: string;
        "viewportMarginLeft"?: string;
        "viewportMarginRight"?: string;
        "viewportMarginTop"?: string;
        "x"?: number;
        "y"?: number;
    }
    interface SpxClassToggle {
        "display"?: string;
        "local"?: string;
        "target"?: string;
        "toggle"?: string;
    }
    interface SpxEdit {
        "display"?: string;
        "editable"?: boolean;
        "name"?: string;
        "outline"?: string;
        "outlineFocus"?: string;
        "placeholder"?: string;
        "placeholderColor"?: string;
        "placeholderOpacity"?: string;
        "styling"?: string;
        "type"?: string;
    }
    interface SpxEditButton {
        "background"?: string;
        "backgroundDiscard"?: string;
        "border"?: string;
        "borderRadius"?: string;
        "color"?: string;
        "colorDiscard"?: string;
        "distanceX"?: string;
        "distanceY"?: string;
        "editId"?: string;
        "fontSize"?: string;
        "gap"?: string;
        "onSpxEditButtonDiscard"?: (event: CustomEvent<any>) => void;
        "onSpxEditButtonSave"?: (event: CustomEvent<any>) => void;
        "padding"?: string;
        "position"?: string;
        "styling"?: string;
        "test"?: boolean;
        "textDiscard"?: string;
        "textEdit"?: string;
        "textSave"?: string;
        "textSuccess"?: string;
        "type"?: string;
    }
    interface SpxGroup {
        "display"?: string;
    }
    interface SpxIcon {
        "icon"?: string;
        "type"?: string;
    }
    interface SpxIframe {
        "size"?: string;
        "src"?: string;
    }
    interface SpxImageComparison {
        "color"?: string;
        "iconColor"?: string;
        "srcAfter"?: string;
        "srcBefore"?: string;
        "start"?: number;
    }
    interface SpxLightbox {
        "display"?: string;
        "effect"?: string;
    }
    interface SpxLoader {
        "color"?: string;
        "speed"?: string;
    }
    interface SpxMasonry {
        "bpColumns"?: string;
        "bpColumnsObject"?: object;
        "columns"?: number;
        "gap"?: string;
        "imageSize"?: string;
        "images"?: string;
        "imagesSrc"?: string;
        "mobileFirst"?: boolean;
        "onSpxMasonryDidLoad"?: (event: CustomEvent<any>) => void;
        "trueOrder"?: boolean;
        "useContainerForBreakpoints"?: boolean;
        "useOwnImageLoader"?: boolean;
        "waitForImages"?: boolean;
    }
    interface SpxMockup {
        "browserBackground"?: string;
        "browserUrlBarBackground"?: string;
        "browserUrlBarBorder"?: string;
        "color"?: string;
        "colorGalaxyS8"?: string;
        "colorGooglePixel"?: string;
        "colorIpadPro"?: string;
        "colorIphone8"?: string;
        "colorMacbook"?: string;
        "colorMacbookPro"?: string;
        "display"?: string;
        "imagePosition"?: string;
        "src"?: string;
        "type"?: string;
    }
    interface SpxNavigation {
        "childBorder"?: string;
        "childChildGap"?: string;
        "childGap"?: string;
        "childIcon"?: string;
        "childIndicatorGap"?: string;
        "childItemBackground"?: string;
        "childItemBackgroundHover"?: string;
        "childItemColor"?: string;
        "childItemColorHover"?: string;
        "childItemPadding"?: string;
        "childPlacement"?: string;
        "fontSize"?: string;
        "itemUnderline"?: boolean;
        "itemUnderlineHover"?: boolean;
        "menu"?: string;
        "mobile"?: number;
        "mobileIcon"?: string;
        "mobileItemBackground"?: string;
        "mobileItemBackgroundHover"?: string;
        "mobileItemColor"?: string;
        "mobileItemColorHover"?: string;
        "mobileItemNestedMarginLeft"?: string;
        "mobileItemPadding"?: string;
        "mobilePlacement"?: string;
        "onSpxNavigationDidLoad"?: (event: CustomEvent<any>) => void;
        "parentItemBackground"?: string;
        "parentItemBackgroundHover"?: string;
        "parentItemColor"?: string;
        "parentItemColorHover"?: string;
        "parentItemGap"?: string;
        "parentItemPadding"?: string;
        "styling"?: string;
        "vertical"?: boolean;
    }
    interface SpxOffset {
        "display"?: string;
        "target"?: string;
    }
    interface SpxScrollspy {
        "contentClass"?: string;
        "display"?: string;
        "navClass"?: string;
        "offset"?: any;
        "onSpxScrollspyDidLoad"?: (event: CustomEvent<any>) => void;
        "target"?: string;
        "urlChange"?: boolean;
    }
    interface SpxSectionSingle {
        "containerMaxWidth"?: string;
        "content"?: boolean;
        "contentMarginTop"?: string;
        "date"?: boolean;
        "dateColor"?: string;
        "dateFontSize"?: string;
        "dateMarginTop"?: string;
        "image"?: boolean;
        "imageBorderRadius"?: string;
        "imageMaxHeight"?: string;
        "imageObjectPosition"?: string;
        "mobile"?: number;
        "onSpxSectionSingleDidLoad"?: (event: CustomEvent<any>) => void;
        "post"?: string;
        "styling"?: string;
        "tableOfContents"?: boolean;
        "tableOfContentsBackground"?: string;
        "tableOfContentsBorder"?: string;
        "tableOfContentsBorderRadius"?: string;
        "tableOfContentsHeading"?: string;
        "tableOfContentsHeadingColor"?: string;
        "tableOfContentsHeadingFontSize"?: string;
        "tableOfContentsHeadingMarginBottom"?: string;
        "tableOfContentsItemColor"?: string;
        "tableOfContentsItemColorActive"?: string;
        "tableOfContentsItemGap"?: string;
        "tableOfContentsMarginTop"?: string;
        "tableOfContentsOffset"?: any;
        "tableOfContentsPadding"?: string;
        "titleColor"?: string;
        "titleFontSize"?: string;
        "titleMarginTop"?: string;
    }
    interface SpxShare {
        "fontSize"?: string;
        "itemBackgroundColor"?: string;
        "itemBorderRadius"?: string;
        "itemColor"?: string;
        "itemGap"?: string;
        "itemPadding"?: string;
        "itemSize"?: string;
        "styling"?: string;
        "target"?: string;
        "theme"?: string;
        "vertical"?: boolean;
    }
    interface SpxSnackbar {
        "animationDelay"?: string;
        "animationDuration"?: string;
        "background"?: string;
        "border"?: string;
        "borderRadius"?: string;
        "closeable"?: boolean;
        "color"?: string;
        "distanceX"?: string;
        "distanceY"?: string;
        "fixed"?: boolean;
        "fontSize"?: string;
        "padding"?: string;
        "position"?: string;
        "reverse"?: boolean;
        "size"?: string;
        "styling"?: string;
        "text"?: string;
    }
    interface SpxSnackbarToggle {
    }
    interface SpxTypewriter {
        "autoStart"?: boolean;
        "delay"?: any;
        "deleteSpeed"?: any;
        "display"?: string;
        "inner"?: boolean;
        "loop"?: boolean;
        "text"?: string;
    }
    interface IntrinsicElements {
        "spx-accordion": SpxAccordion;
        "spx-animate": SpxAnimate;
        "spx-class-toggle": SpxClassToggle;
        "spx-edit": SpxEdit;
        "spx-edit-button": SpxEditButton;
        "spx-group": SpxGroup;
        "spx-icon": SpxIcon;
        "spx-iframe": SpxIframe;
        "spx-image-comparison": SpxImageComparison;
        "spx-lightbox": SpxLightbox;
        "spx-loader": SpxLoader;
        "spx-masonry": SpxMasonry;
        "spx-mockup": SpxMockup;
        "spx-navigation": SpxNavigation;
        "spx-offset": SpxOffset;
        "spx-scrollspy": SpxScrollspy;
        "spx-section-single": SpxSectionSingle;
        "spx-share": SpxShare;
        "spx-snackbar": SpxSnackbar;
        "spx-snackbar-toggle": SpxSnackbarToggle;
        "spx-typewriter": SpxTypewriter;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "spx-accordion": LocalJSX.SpxAccordion & JSXBase.HTMLAttributes<HTMLSpxAccordionElement>;
            "spx-animate": LocalJSX.SpxAnimate & JSXBase.HTMLAttributes<HTMLSpxAnimateElement>;
            "spx-class-toggle": LocalJSX.SpxClassToggle & JSXBase.HTMLAttributes<HTMLSpxClassToggleElement>;
            "spx-edit": LocalJSX.SpxEdit & JSXBase.HTMLAttributes<HTMLSpxEditElement>;
            "spx-edit-button": LocalJSX.SpxEditButton & JSXBase.HTMLAttributes<HTMLSpxEditButtonElement>;
            "spx-group": LocalJSX.SpxGroup & JSXBase.HTMLAttributes<HTMLSpxGroupElement>;
            "spx-icon": LocalJSX.SpxIcon & JSXBase.HTMLAttributes<HTMLSpxIconElement>;
            "spx-iframe": LocalJSX.SpxIframe & JSXBase.HTMLAttributes<HTMLSpxIframeElement>;
            "spx-image-comparison": LocalJSX.SpxImageComparison & JSXBase.HTMLAttributes<HTMLSpxImageComparisonElement>;
            "spx-lightbox": LocalJSX.SpxLightbox & JSXBase.HTMLAttributes<HTMLSpxLightboxElement>;
            "spx-loader": LocalJSX.SpxLoader & JSXBase.HTMLAttributes<HTMLSpxLoaderElement>;
            "spx-masonry": LocalJSX.SpxMasonry & JSXBase.HTMLAttributes<HTMLSpxMasonryElement>;
            "spx-mockup": LocalJSX.SpxMockup & JSXBase.HTMLAttributes<HTMLSpxMockupElement>;
            "spx-navigation": LocalJSX.SpxNavigation & JSXBase.HTMLAttributes<HTMLSpxNavigationElement>;
            "spx-offset": LocalJSX.SpxOffset & JSXBase.HTMLAttributes<HTMLSpxOffsetElement>;
            "spx-scrollspy": LocalJSX.SpxScrollspy & JSXBase.HTMLAttributes<HTMLSpxScrollspyElement>;
            "spx-section-single": LocalJSX.SpxSectionSingle & JSXBase.HTMLAttributes<HTMLSpxSectionSingleElement>;
            "spx-share": LocalJSX.SpxShare & JSXBase.HTMLAttributes<HTMLSpxShareElement>;
            "spx-snackbar": LocalJSX.SpxSnackbar & JSXBase.HTMLAttributes<HTMLSpxSnackbarElement>;
            "spx-snackbar-toggle": LocalJSX.SpxSnackbarToggle & JSXBase.HTMLAttributes<HTMLSpxSnackbarToggleElement>;
            "spx-typewriter": LocalJSX.SpxTypewriter & JSXBase.HTMLAttributes<HTMLSpxTypewriterElement>;
        }
    }
}
