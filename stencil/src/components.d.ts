/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SpxAccordion {
        "classContent": string;
        "classContentActive": string;
        "classContentInactive": string;
        "classContentText": string;
        "classContentTextActive": string;
        "classContentTextInactive": string;
        "classHeader": string;
        "classHeaderActive": string;
        "classHeaderIcon": string;
        "classHeaderIconActive": string;
        "classHeaderIconContainer": string;
        "classHeaderIconContainerActive": string;
        "classHeaderIconContainerInactive": string;
        "classHeaderIconInactive": string;
        "classHeaderInactive": string;
        "classHeaderText": string;
        "classHeaderTextActive": string;
        "classHeaderTextInactive": string;
        /**
          * Closes the accordion.
         */
        "close": () => Promise<void>;
        /**
          * @css
         */
        "contentColor": string;
        /**
          * @css
         */
        "contentFontSize": string;
        /**
          * @css
         */
        "contentFontSizeMax": number;
        /**
          * @css
         */
        "contentFontSizeMin": number;
        /**
          * Content text.
         */
        "contentText": string;
        /**
          * Content text tag.
         */
        "contentTextTag": string;
        /**
          * Space between header and content.
          * @css
         */
        "gap": string;
        /**
          * @css
         */
        "gapMax": number;
        /**
          * @css
         */
        "gapMin": number;
        /**
          * @css
         */
        "headerColor": string;
        /**
          * @css
         */
        "headerFontSize": string;
        /**
          * @css
         */
        "headerFontSizeMax": number;
        /**
          * @css
         */
        "headerFontSizeMin": number;
        /**
          * Gap between header text and icon.
          * @css
         */
        "headerGap": string;
        /**
          * @css
         */
        "headerGapMax": number;
        /**
          * @css
         */
        "headerGapMin": number;
        /**
          * Header text.
         */
        "headerText": string;
        /**
          * Header text when component is closed.
         */
        "headerTextOpen": string;
        /**
          * Header text tag.
         */
        "headerTextTag": string;
        /**
          * Icon.
         */
        "icon": string;
        /**
          * Icon transform.
          * @css
         */
        "iconTransform": string;
        /**
          * Icon type.
         */
        "iconType": string;
        /**
          * Sets the ID to link different accordions together.
         */
        "link": string;
        /**
          * Sets the type of link.
          * @choice open, close, toggle
         */
        "linkType": string;
        /**
          * Opens the accordion.
         */
        "open": () => Promise<void>;
        /**
          * State of accordion.
         */
        "openState": boolean;
        /**
          * Reverse icon positioning.
         */
        "reverse": boolean;
        /**
          * Styling.
          * @choice default, fluid, headless
         */
        "styling": string;
        /**
          * Toggles the accordion.
         */
        "toggle": () => Promise<void>;
    }
    interface SpxAnimate {
        /**
          * Same as opacity but sets visibility to 'hidden' after hitting 0.
         */
        "autoAlpha": number;
        /**
          * Clip-path value the animation starts from.
         */
        "clipPath": string;
        /**
          * Delay before animation starts.
         */
        "delay": number;
        /**
          * Animation duration.
         */
        "duration": number;
        /**
          * Ease being used. Accepts all common GSAP options.
         */
        "ease": string;
        /**
          * Filter value the animation starts from.
         */
        "filter": string;
        /**
          * Determines if animation should only play once. (if viewport is true)
         */
        "once": boolean;
        /**
          * Opacity level the animation starts from.
         */
        "opacity": number;
        /**
          * Plays animation.
          * @param from From where to play animation.
          * @param suppressEvents Suppress events before playing.
         */
        "play": (from?: number, suppressEvents?: boolean) => Promise<void>;
        /**
          * Repeats the animation. -1 to repeat indefinitely.
         */
        "repeat": number;
        /**
          * Time to wait between repetitions.
         */
        "repeatDelay": number;
        /**
          * Restarts animation.
          * @param includeDelay Include delay when restarting.
          * @param suppressEvents Suppress events before playing.
         */
        "restart": (includeDelay?: boolean, suppressEvents?: boolean) => Promise<void>;
        /**
          * Reverses the animation.
         */
        "reverse": boolean;
        /**
          * Amount of time elements should be staggered by.
         */
        "stagger": number;
        /**
          * [prop:target]
         */
        "target": string;
        /**
          * Starts animation when target is in the viewport.
         */
        "viewport": boolean;
        /**
          * Scroll intersection observer root margin.
         */
        "viewportRootMargin": string;
        /**
          * Scroll intersection observer threshold.
         */
        "viewportThreshold": number;
        /**
          * X position the animation starts from.
         */
        "x": any;
        /**
          * Y position the animation starts from.
         */
        "y": any;
        /**
          * Causes the animation to go back and forth, alternating backward and forward on each repeat.
         */
        "yoyo": boolean;
    }
    interface SpxClassToggle {
        /**
          * If target element should be searched within component or in document.
         */
        "inner": boolean;
        /**
          * Specify a local storage item, so the toggle state will be remembered when the user visits the site again.
         */
        "local": string;
        /**
          * [prop:target]
         */
        "target": string;
        /**
          * List of classes that should be toggled.
         */
        "toggle": string;
    }
    interface SpxCode {
        /**
          * @css
         */
        "background": string;
        /**
          * @css
         */
        "borderRadius": string;
        /**
          * Enable clipboard button.
         */
        "clipboard": boolean;
        /**
          * @css
         */
        "clipboardButtonBackground": string;
        /**
          * @css
         */
        "clipboardButtonColor": string;
        /**
          * @css
         */
        "clipboardButtonFontSize": string;
        /**
          * @css
         */
        "clipboardButtonFontWeight": any;
        /**
          * @css
         */
        "clipboardButtonPadding": string;
        "clipboardButtonText": string;
        "clipboardButtonTextCopied": string;
        /**
          * @css
         */
        "clipboardButtonTextTransform": string;
        /**
          * Can be used instead of the inner slot.
         */
        "content": string;
        /**
          * @css
         */
        "filter": string;
        /**
          * @css
         */
        "fontSize": string;
        /**
          * @css
         */
        "height": string;
        /**
          * Show scrollbar.
         */
        "hideScrollbar": boolean;
        /**
          * Load component when it enters the viewport.
         */
        "lazy": boolean;
        /**
          * Enable line numbers.
         */
        "lineNumbers": boolean;
        /**
          * @css
         */
        "lineNumbersBackground": string;
        /**
          * @css
         */
        "lineNumbersColor": string;
        /**
          * Start of line number.
         */
        "lineNumbersStart": number;
        /**
          * @css
         */
        "maxWidth": string;
        /**
          * @css
         */
        "overflow": string;
        /**
          * @css
         */
        "padding": string;
        /**
          * Colour theme.
          * @choice default, dracula
         */
        "theme": string;
        /**
          * Determines the programming language.
          * @choice markup, css, js, php, twig, json
         */
        "type": string;
        /**
          * Removes all whitespace from the top of the code block.
         */
        "whitespaceLeftTrim": boolean;
        /**
          * If the whole code block is indented too much it removes the extra indent.
         */
        "whitespaceRemoveIndent": boolean;
        /**
          * Removes trailing whitespace on all lines.
         */
        "whitespaceRemoveTrailing": boolean;
        /**
          * Removes all whitespace from the bottom of the code block.
         */
        "whitespaceRightTrim": boolean;
    }
    interface SpxControlColor {
        "data": string;
        "handleInput": Function;
        "label": string;
        "value": string;
    }
    interface SpxControlGroup {
    }
    interface SpxControlInput {
        "data": string;
        "handleInput": Function;
        "label": string;
        "max": number;
        "min": number;
        "placeholder": string;
        "step": number;
        "type": string;
        "value": string;
    }
    interface SpxControlLabel {
        "label": string;
        "mb": boolean;
    }
    interface SpxControlNumber {
        "data": string;
        "handleInput": any;
        "label": string;
        "max": number;
        "min": number;
        "slider": boolean;
        "start": number;
        "step": number;
        "value": string;
    }
    interface SpxControlSelect {
        "data": string;
        "delimiter": string;
        "handleInput": Function;
        "label": string;
        "options": string;
        "value": string;
    }
    interface SpxControlSwitch {
        "checked": boolean;
        "data": string;
        "handleInput": Function;
        "label": string;
    }
    interface SpxEdit {
        "editable": boolean;
        "name": string;
        /**
          * @css
         */
        "outline": string;
        /**
          * @css
         */
        "outlineFocus": string;
        "placeholder": string;
        /**
          * @css
         */
        "placeholderColor": string;
        /**
          * @css
         */
        "placeholderOpacity": string;
        "subfield": boolean;
        "text": string;
        "type": string;
    }
    interface SpxEditButton {
        "background": string;
        /**
          * Discard button background.
          * @css
         */
        "backgroundDiscard": string;
        "border": string;
        "borderDiscard": string;
        "borderRadius": string;
        "bottom": string;
        "classButton": string;
        "classButtonDiscard": string;
        "classLoader": string;
        "color": string;
        /**
          * Discard button color.
          * @css
         */
        "colorDiscard": string;
        /**
          * Discard changes.
         */
        "discard": () => Promise<void>;
        /**
          * Enable editing.
         */
        "edit": () => Promise<void>;
        /**
          * Corresponding ID for editable fields. This property is needed when multiple edit-button components are used on the page. Simply apply a "data-spx-edit-id" attribute with the same value to editable elements.
         */
        "editId": string;
        "fontSize": string;
        "fontSizeMax": number;
        "fontSizeMin": number;
        /**
          * Gap between the buttons.
          * @css
         */
        "gap": string;
        "left": string;
        "loaderColor": string;
        "loaderGap": string;
        "padding": string;
        "paddingXMax": number;
        "paddingXMin": number;
        "paddingYMax": number;
        "paddingYMin": number;
        /**
          * Position property of component.
         */
        "position": | 'fixed'
    | 'absolute'
    | 'relative'
    | 'static';
        "right": string;
        /**
          * Save changes.
         */
        "save": () => Promise<void>;
        /**
          * Styling.
          * @choice default, fluid, headless
         */
        "styling": string;
        "test": boolean;
        /**
          * Discard button text.
         */
        "textDiscard": string;
        /**
          * Edit button text.
         */
        "textEdit": string;
        /**
          * Save button text.
         */
        "textSave": string;
        "top": string;
        "zIndex": number;
    }
    interface SpxEditor {
        "height": string;
    }
    interface SpxEditorComponents {
    }
    interface SpxEditorContainer {
    }
    interface SpxEditorContent {
    }
    interface SpxEditorControls {
    }
    interface SpxEditorHeader {
    }
    interface SpxGroup {
        "content": string;
        /**
          * [prop:target]
         */
        "target": string;
    }
    interface SpxIcon {
        "color": string;
        /**
          * Icon code.
         */
        "icon": string;
        /**
          * Icon size.
         */
        "size": string;
        "sizeMax": number;
        "sizeMin": number;
        /**
          * Styling.
          * @choice default, fluid
         */
        "styling": string;
        /**
          * Icon type.
          * @choice ionicons, caret
         */
        "type": string;
        "width": string;
    }
    interface SpxIframe {
        /**
          * Automatically resize iframe to fit content.
         */
        "fit": boolean;
        /**
          * Lazy load content.
         */
        "lazy": boolean;
        /**
          * @css
         */
        "loaderBackground": string;
        /**
          * @css
         */
        "loaderBorderRadius": string;
        /**
          * @css
         */
        "loaderColor": string;
        /**
          * @css
         */
        "loaderPadding": string;
        /**
          * @css
         */
        "minHeight": string;
        /**
          * Screen size of the site shown inside the iframe.
         */
        "size": string;
        /**
          * Source for the iframe.
         */
        "src": string;
    }
    interface SpxImageComparison {
        "active": boolean;
        /**
          * @css
         */
        "color": string;
        /**
          * @css
         */
        "height": string;
        /**
          * @css
         */
        "iconColor": string;
        /**
          * Lazy load images.
         */
        "lazy": boolean;
        /**
          * Image URL of the before image.
         */
        "srcAfter": string;
        /**
          * Image URL of the after image.
         */
        "srcBefore": string;
        /**
          * Opening state in pixels.
         */
        "start": number;
        /**
          * Step amount when using component with arrow keys.
         */
        "steps": number;
    }
    interface SpxLightbox {
        /**
          * If 'overflow: hidden' should be applied to the body when a lightbox is open.
         */
        "bodyOverflow": boolean;
        /**
          * Show close button.
         */
        "closeButton": boolean;
        /**
          * @css
         */
        "closeButtonColor": string;
        /**
          * @css
         */
        "overlayBackdropFilter": string;
        /**
          * @css
         */
        "overlayBackground": string;
        /**
          * [component:spx-slider]
         */
        "spxSlider": string;
        /**
          * [prop:target]
         */
        "target": string;
    }
    interface SpxMasonry {
        /**
          * Number of columns.
         */
        "columns": number;
        /**
          * Gap between images.
          * @css
         */
        "gap": string;
        /**
          * WordPress media size when using the helper function.
         */
        "imageSize": string;
        /**
          * Gets images from an ACF or Metabox field.
          * @choice acf, mb
         */
        "imageSrc": string;
        /**
          * Gets images from an ACF or Metabox field.
          * @helper &lt;?php spxGetImages( $fieldName, $type, $postId ); ?>
          * @function spxGetImages
         */
        "images": string;
        /**
          * Lazy load images.
         */
        "lazy": boolean;
    }
    interface SpxMockup {
        /**
          * Samsung S8 color.
          * @choice black, blue
         */
        "colorGalaxyS8": string;
        /**
          * Google Pixel color.
          * @choice silver, black, blue
         */
        "colorGooglePixel": string;
        /**
          * IPad Pro color.
          * @choice silver, gold, rosegold, spacegray
         */
        "colorIpadPro": string;
        /**
          * IPhone 8 color.
          * @choice silver, gold, spacegray
         */
        "colorIphone8": string;
        /**
          * MacBook color.
          * @choice silver, gold, rosegold, spacegray
         */
        "colorMacbook": string;
        /**
          * MacBook Pro color.
          * @choice silver, spacegray
         */
        "colorMacbookPro": string;
        /**
          * @css
         */
        "imagePosition": string;
        /**
          * Mockup size.
         */
        "size": number;
        /**
          * Mockup size maximum.
         */
        "sizeMax": number;
        /**
          * Mockup size minimum.
         */
        "sizeMin": number;
        /**
          * Image src if no inner slot is used.
         */
        "src": string;
        /**
          * Device type.
          * @choice iphone-8, iphone-x, google-pixel-2-xl, google-pixel, galaxy-s8, ipad-pro, surface-pro, surface-book, macbook, macbook-pro, surface-studio, imac-pro, apple-watch
         */
        "type": string;
    }
    interface SpxNavigation {
        /**
          * @css
         */
        "childBorder": string;
        /**
          * Child menu border-radius.
          * @css
         */
        "childBorderRadius": string;
        /**
          * Child menu box-shadow.
          * @css
         */
        "childBoxShadow": string;
        /**
          * Gap between nested child menus.
          * @css
         */
        "childChildGap": string;
        /**
          * Gap between top level menu items and child menus.
          * @css
         */
        "childGap": string;
        /**
          * Indicator icon.
         */
        "childIcon": string;
        /**
          * Indicator icon type.
         */
        "childIconType": string;
        /**
          * Gap between child menu indicator and text.
          * @css
         */
        "childIndicatorGap": string;
        /**
          * @css
         */
        "childItemBackground": string;
        /**
          * @css
         */
        "childItemBackgroundHover": string;
        /**
          * @css
         */
        "childItemColor": string;
        /**
          * @css
         */
        "childItemColorHover": string;
        /**
          * @css
         */
        "childItemPadding": string;
        /**
          * Child menu placement.
          * @css 
          * @choice start, end
         */
        "childPlacement": string;
        /**
          * @css
         */
        "fontSize": string;
        "isMobile": boolean;
        /**
          * Underlines all links.
         */
        "itemUnderline": boolean;
        /**
          * Underlines all links on hover.
         */
        "itemUnderlineHover": boolean;
        /**
          * Renders a WordPress menu.
          * @helper &lt;?php spxGetNavigation( $menuName ); ?>
          * @function spxGetNavigation
         */
        "menu": string;
        /**
          * Mobile breakpoint.
         */
        "mobile": number;
        /**
          * Mobile button icon.
         */
        "mobileIcon": string;
        /**
          * Mobile button icon type.
         */
        "mobileIconType": string;
        /**
          * @css
         */
        "mobileItemBackground": string;
        /**
          * @css
         */
        "mobileItemBackgroundHover": string;
        /**
          * @css
         */
        "mobileItemColor": string;
        /**
          * @css
         */
        "mobileItemColorHover": string;
        /**
          * @css
         */
        "mobileItemNestedMarginLeft": string;
        /**
          * @css
         */
        "mobileItemPadding": string;
        /**
          * Mobile placement.
          * @choice start, end
         */
        "mobilePlacement": string;
        /**
          * @css
         */
        "parentItemBackground": string;
        /**
          * @css
         */
        "parentItemBackgroundHover": string;
        /**
          * @css
         */
        "parentItemColor": string;
        /**
          * @css
         */
        "parentItemColorHover": string;
        /**
          * Gap between parent menu items.
          * @css
         */
        "parentItemGap": string;
        /**
          * @css
         */
        "parentItemPadding": string;
        /**
          * Renders menu vertically.
         */
        "vertical": boolean;
    }
    interface SpxNotation {
        /**
          * Turn animation on or off when animation.
         */
        "animation": boolean;
        /**
          * Animation duration.
         */
        "animationDuration": number;
        /**
          * Autoplay.
         */
        "autoplay": boolean;
        /**
          * Brackets.
         */
        "brackets": string;
        /**
          * Remove the annotation.
         */
        "clear": () => Promise<void>;
        "color": string;
        "delay": number;
        /**
          * Create a group on annotations by applying a "data-spx-annotation" to elements within.
         */
        "group": boolean;
        /**
          * Hides the annotation. (non animated)
         */
        "hide": () => Promise<void>;
        /**
          * Number of iterations.
         */
        "iterations": number;
        /**
          * Annotate multiline text.
         */
        "multiline": boolean;
        /**
          * Padding around notations.
         */
        "padding": number;
        /**
          * Redraw the animation.
         */
        "redraw": () => Promise<void>;
        /**
          * Draws the annotation.
         */
        "show": () => Promise<void>;
        /**
          * Stroke width.
         */
        "strokeWidth": number;
        /**
          * Type of notation.
          * @choice underline, box, circle, highlight, strike-through, crossed-off, bracket
         */
        "type": string;
    }
    interface SpxOffset {
        /**
          * Recalculate distance.
         */
        "recalc": () => Promise<void>;
        /**
          * [prop:target]
         */
        "target": string;
        /**
          * Add offset as CSS variable to body.
         */
        "variable": boolean;
    }
    interface SpxScrollspy {
        /**
          * Applied class to active navigation element.
         */
        "navClass": string;
        /**
          * Intersection observer root margin.
         */
        "rootMargin": string;
        /**
          * [prop:target]
         */
        "target": string;
        /**
          * Intersection observer threshold.
         */
        "threshold": number;
        /**
          * Appends the currently active link to the end of the URL.
         */
        "urlChange": boolean;
    }
    interface SpxShare {
        /**
          * @css
         */
        "fontSize": string;
        /**
          * @css
         */
        "fontSizeMax": number;
        /**
          * @css
         */
        "fontSizeMin": number;
        /**
          * @css
         */
        "itemBackground": string;
        /**
          * @css
         */
        "itemBorderRadius": string;
        /**
          * Gap between buttons.
          * @css
         */
        "itemColor": string;
        /**
          * Filter hover.
          * @css
         */
        "itemFilterHover": string;
        /**
          * Gap between buttons.
          * @css
         */
        "itemGap": string;
        /**
          * @css
         */
        "itemGapMax": number;
        /**
          * @css
         */
        "itemGapMin": number;
        /**
          * @css
         */
        "itemPadding": string;
        /**
          * @css
         */
        "itemPaddingMax": number;
        /**
          * @css
         */
        "itemPaddingMin": number;
        /**
          * @css
         */
        "itemSize": string;
        /**
          * @css
         */
        "itemSizeMax": number;
        /**
          * @css
         */
        "itemSizeMin": number;
        /**
          * Styling.
          * @choice default, fluid
         */
        "styling": string;
        /**
          * Link href target.
         */
        "target": string;
        /**
          * Button theme.
          * @choice default, outline, minimal
         */
        "theme": string;
        /**
          * Render buttons vertically.
         */
        "vertical": boolean;
    }
    interface SpxSlider {
        /**
          * Automatically adjusts height of slider.
         */
        "autoheight": boolean;
        /**
          * Starts navigating to the next slide when page is loaded.
         */
        "autoplay": boolean;
        /**
          * Autoplay delay.
         */
        "autoplayDelay": number;
        /**
          * Disable autoplay after interaction with slides.
         */
        "autoplayDisableOnInteraction": boolean;
        /**
          * Centers slides in viewport.
         */
        "centeredSlides": boolean;
        /**
          * Slider effect.
          * @choice slide, effect
         */
        "effect": string;
        /**
          * Space between slides.
         */
        "gap": number;
        /**
          * Image object-fit.
          * @choice fill, contain, cover, scale-down, none
         */
        "imageObjectFit": string;
        /**
          * WordPress media size when using the helper function.
         */
        "imageSize": string;
        /**
          * Gets images from an ACF or Metabox field.
          * @choice acf, mb
         */
        "imageSrc": string;
        /**
          * Gets images from an ACF or Metabox field.
          * @helper &lt;?php spxGetImages( $fieldName, $type, $postId ); ?>
          * @function spxGetImages
         */
        "images": string;
        /**
          * Lazy load images.
         */
        "lazy": boolean;
        /**
          * Amount of images to to be preloaded when lazy is enabled.
         */
        "lazyLoadPrevNext": number;
        /**
          * Loops all slides infinitely.
         */
        "loop": boolean;
        /**
          * @css
         */
        "maxHeight": string;
        "navigation": boolean;
        /**
          * @css
         */
        "navigationBackdropFilter": string;
        /**
          * @css
         */
        "navigationBackground": string;
        /**
          * @css
         */
        "navigationBackgroundHover": string;
        /**
          * @css
         */
        "navigationBorderRadius": string;
        /**
          * @css
         */
        "navigationColor": string;
        /**
          * Navigation distance.
          * @css
         */
        "navigationDistanceX": string;
        /**
          * Navigation icon type.
         */
        "navigationIconNext": string;
        /**
          * Navigation icon type.
         */
        "navigationIconPrev": string;
        /**
          * Navigation icon type.
         */
        "navigationIconType": string;
        /**
          * @css
         */
        "navigationPadding": string;
        /**
          * Navigation size.
          * @css
         */
        "navigationSize": string;
        /**
          * Pagination type.
          * @choice bullets, none
         */
        "pagination": string;
        /**
          * @css
         */
        "paginationBackdropFilter": string;
        /**
          * @css
         */
        "paginationBackground": string;
        /**
          * @css
         */
        "paginationBulletsBackground": string;
        /**
          * @css
         */
        "paginationBulletsBackgroundActive": string;
        /**
          * Make bullets clickable.
         */
        "paginationBulletsClickable": boolean;
        /**
          * Will only keep a selected amount of bullets visible.
         */
        "paginationBulletsDynamic": boolean;
        /**
          * Amount of dynamic bullets.
         */
        "paginationBulletsDynamicAmount": number;
        /**
          * Space between the bullets.
          * @css
         */
        "paginationBulletsGap": string;
        /**
          * Size of the bullets.
          * @css
         */
        "paginationBulletsSize": string;
        /**
          * Filter property for the previous and next elements.
          * @css
         */
        "prevNextFilter": string;
        /**
          * Screen reader message for first slide.
         */
        "slideMessageFirst": string;
        /**
          * Screen reader message for last slide.
         */
        "slideMessageLast": string;
        /**
          * Screen reader message for next slide.
         */
        "slideMessageNext": string;
        /**
          * Screen reader message for previous slide.
         */
        "slideMessagePrevious": string;
        /**
          * Amount of slides shown at once.
         */
        "slidesPerView": number;
        /**
          * Sliding speed.
         */
        "speed": number;
        /**
          * At which slide component should start.
         */
        "start": number;
    }
    interface SpxSlideshow {
        /**
          * Duration of slideshow to complete one cycle.
          * @css
         */
        "duration": string;
        /**
          * Gap between inner elements.
          * @css
         */
        "gap": string;
        /**
          * @css
         */
        "height": string;
        /**
          * WordPress media size when using the helper function.
         */
        "imageSize": string;
        /**
          * Gets images from an ACF or Metabox field.
          * @choice acf, mb
         */
        "imageSrc": string;
        /**
          * Gets images from an ACF or Metabox field.
          * @helper &lt;?php spxGetImages( $fieldName, $type, $postId ); ?>
          * @function spxGetImages
         */
        "images": string;
        /**
          * Lazy load images.
         */
        "lazy": boolean;
        /**
          * Max width of inner elements.
          * @css
         */
        "maxWidth": string;
        /**
          * @css
         */
        "objectFit": string;
        /**
          * If not set with this attribute, overflow should be set on the parent element.
          * @css
         */
        "overflow": string;
    }
    interface SpxTailwind {
    }
    interface SpxTextPath {
        /**
          * Space between text and path.
         */
        "gap": string;
        /**
          * Image src.
         */
        "src": string;
        /**
          * Starting offset off the text.
         */
        "startOffset": string;
        /**
          * Text to be shown.
         */
        "text": string;
        /**
          * @css
         */
        "textColor": string;
        /**
          * Text size.
          * @css
         */
        "textFontSize": string;
        /**
          * @css
         */
        "textFontWeight": string;
        /**
          * Text transform.
          * @css
         */
        "textTransform": string;
    }
    interface SpxTypewriter {
        /**
          * Automatically starts writing.
         */
        "autoStart": boolean;
        /**
          * Writing delay in ms. Also accepts 'natural' value.
         */
        "delay": any;
        /**
          * Delete delay in ms. Also accepts 'natural' value.
         */
        "deleteSpeed": any;
        /**
          * Delimiter to use if multiple sentences are going ot be used.
         */
        "delimiter": any;
        /**
          * Loops the animation.
         */
        "loop": boolean;
        /**
          * Start animation.
         */
        "play": () => Promise<void>;
        /**
          * Stop animation.
         */
        "stop": () => Promise<void>;
        /**
          * Text that should be written.
         */
        "text": string;
    }
}
declare global {
    interface HTMLSpxAccordionElement extends Components.SpxAccordion, HTMLStencilElement {
    }
    var HTMLSpxAccordionElement: {
        prototype: HTMLSpxAccordionElement;
        new (): HTMLSpxAccordionElement;
    };
    interface HTMLSpxAnimateElement extends Components.SpxAnimate, HTMLStencilElement {
    }
    var HTMLSpxAnimateElement: {
        prototype: HTMLSpxAnimateElement;
        new (): HTMLSpxAnimateElement;
    };
    interface HTMLSpxClassToggleElement extends Components.SpxClassToggle, HTMLStencilElement {
    }
    var HTMLSpxClassToggleElement: {
        prototype: HTMLSpxClassToggleElement;
        new (): HTMLSpxClassToggleElement;
    };
    interface HTMLSpxCodeElement extends Components.SpxCode, HTMLStencilElement {
    }
    var HTMLSpxCodeElement: {
        prototype: HTMLSpxCodeElement;
        new (): HTMLSpxCodeElement;
    };
    interface HTMLSpxControlColorElement extends Components.SpxControlColor, HTMLStencilElement {
    }
    var HTMLSpxControlColorElement: {
        prototype: HTMLSpxControlColorElement;
        new (): HTMLSpxControlColorElement;
    };
    interface HTMLSpxControlGroupElement extends Components.SpxControlGroup, HTMLStencilElement {
    }
    var HTMLSpxControlGroupElement: {
        prototype: HTMLSpxControlGroupElement;
        new (): HTMLSpxControlGroupElement;
    };
    interface HTMLSpxControlInputElement extends Components.SpxControlInput, HTMLStencilElement {
    }
    var HTMLSpxControlInputElement: {
        prototype: HTMLSpxControlInputElement;
        new (): HTMLSpxControlInputElement;
    };
    interface HTMLSpxControlLabelElement extends Components.SpxControlLabel, HTMLStencilElement {
    }
    var HTMLSpxControlLabelElement: {
        prototype: HTMLSpxControlLabelElement;
        new (): HTMLSpxControlLabelElement;
    };
    interface HTMLSpxControlNumberElement extends Components.SpxControlNumber, HTMLStencilElement {
    }
    var HTMLSpxControlNumberElement: {
        prototype: HTMLSpxControlNumberElement;
        new (): HTMLSpxControlNumberElement;
    };
    interface HTMLSpxControlSelectElement extends Components.SpxControlSelect, HTMLStencilElement {
    }
    var HTMLSpxControlSelectElement: {
        prototype: HTMLSpxControlSelectElement;
        new (): HTMLSpxControlSelectElement;
    };
    interface HTMLSpxControlSwitchElement extends Components.SpxControlSwitch, HTMLStencilElement {
    }
    var HTMLSpxControlSwitchElement: {
        prototype: HTMLSpxControlSwitchElement;
        new (): HTMLSpxControlSwitchElement;
    };
    interface HTMLSpxEditElement extends Components.SpxEdit, HTMLStencilElement {
    }
    var HTMLSpxEditElement: {
        prototype: HTMLSpxEditElement;
        new (): HTMLSpxEditElement;
    };
    interface HTMLSpxEditButtonElement extends Components.SpxEditButton, HTMLStencilElement {
    }
    var HTMLSpxEditButtonElement: {
        prototype: HTMLSpxEditButtonElement;
        new (): HTMLSpxEditButtonElement;
    };
    interface HTMLSpxEditorElement extends Components.SpxEditor, HTMLStencilElement {
    }
    var HTMLSpxEditorElement: {
        prototype: HTMLSpxEditorElement;
        new (): HTMLSpxEditorElement;
    };
    interface HTMLSpxEditorComponentsElement extends Components.SpxEditorComponents, HTMLStencilElement {
    }
    var HTMLSpxEditorComponentsElement: {
        prototype: HTMLSpxEditorComponentsElement;
        new (): HTMLSpxEditorComponentsElement;
    };
    interface HTMLSpxEditorContainerElement extends Components.SpxEditorContainer, HTMLStencilElement {
    }
    var HTMLSpxEditorContainerElement: {
        prototype: HTMLSpxEditorContainerElement;
        new (): HTMLSpxEditorContainerElement;
    };
    interface HTMLSpxEditorContentElement extends Components.SpxEditorContent, HTMLStencilElement {
    }
    var HTMLSpxEditorContentElement: {
        prototype: HTMLSpxEditorContentElement;
        new (): HTMLSpxEditorContentElement;
    };
    interface HTMLSpxEditorControlsElement extends Components.SpxEditorControls, HTMLStencilElement {
    }
    var HTMLSpxEditorControlsElement: {
        prototype: HTMLSpxEditorControlsElement;
        new (): HTMLSpxEditorControlsElement;
    };
    interface HTMLSpxEditorHeaderElement extends Components.SpxEditorHeader, HTMLStencilElement {
    }
    var HTMLSpxEditorHeaderElement: {
        prototype: HTMLSpxEditorHeaderElement;
        new (): HTMLSpxEditorHeaderElement;
    };
    interface HTMLSpxGroupElement extends Components.SpxGroup, HTMLStencilElement {
    }
    var HTMLSpxGroupElement: {
        prototype: HTMLSpxGroupElement;
        new (): HTMLSpxGroupElement;
    };
    interface HTMLSpxIconElement extends Components.SpxIcon, HTMLStencilElement {
    }
    var HTMLSpxIconElement: {
        prototype: HTMLSpxIconElement;
        new (): HTMLSpxIconElement;
    };
    interface HTMLSpxIframeElement extends Components.SpxIframe, HTMLStencilElement {
    }
    var HTMLSpxIframeElement: {
        prototype: HTMLSpxIframeElement;
        new (): HTMLSpxIframeElement;
    };
    interface HTMLSpxImageComparisonElement extends Components.SpxImageComparison, HTMLStencilElement {
    }
    var HTMLSpxImageComparisonElement: {
        prototype: HTMLSpxImageComparisonElement;
        new (): HTMLSpxImageComparisonElement;
    };
    interface HTMLSpxLightboxElement extends Components.SpxLightbox, HTMLStencilElement {
    }
    var HTMLSpxLightboxElement: {
        prototype: HTMLSpxLightboxElement;
        new (): HTMLSpxLightboxElement;
    };
    interface HTMLSpxMasonryElement extends Components.SpxMasonry, HTMLStencilElement {
    }
    var HTMLSpxMasonryElement: {
        prototype: HTMLSpxMasonryElement;
        new (): HTMLSpxMasonryElement;
    };
    interface HTMLSpxMockupElement extends Components.SpxMockup, HTMLStencilElement {
    }
    var HTMLSpxMockupElement: {
        prototype: HTMLSpxMockupElement;
        new (): HTMLSpxMockupElement;
    };
    interface HTMLSpxNavigationElement extends Components.SpxNavigation, HTMLStencilElement {
    }
    var HTMLSpxNavigationElement: {
        prototype: HTMLSpxNavigationElement;
        new (): HTMLSpxNavigationElement;
    };
    interface HTMLSpxNotationElement extends Components.SpxNotation, HTMLStencilElement {
    }
    var HTMLSpxNotationElement: {
        prototype: HTMLSpxNotationElement;
        new (): HTMLSpxNotationElement;
    };
    interface HTMLSpxOffsetElement extends Components.SpxOffset, HTMLStencilElement {
    }
    var HTMLSpxOffsetElement: {
        prototype: HTMLSpxOffsetElement;
        new (): HTMLSpxOffsetElement;
    };
    interface HTMLSpxScrollspyElement extends Components.SpxScrollspy, HTMLStencilElement {
    }
    var HTMLSpxScrollspyElement: {
        prototype: HTMLSpxScrollspyElement;
        new (): HTMLSpxScrollspyElement;
    };
    interface HTMLSpxShareElement extends Components.SpxShare, HTMLStencilElement {
    }
    var HTMLSpxShareElement: {
        prototype: HTMLSpxShareElement;
        new (): HTMLSpxShareElement;
    };
    interface HTMLSpxSliderElement extends Components.SpxSlider, HTMLStencilElement {
    }
    var HTMLSpxSliderElement: {
        prototype: HTMLSpxSliderElement;
        new (): HTMLSpxSliderElement;
    };
    interface HTMLSpxSlideshowElement extends Components.SpxSlideshow, HTMLStencilElement {
    }
    var HTMLSpxSlideshowElement: {
        prototype: HTMLSpxSlideshowElement;
        new (): HTMLSpxSlideshowElement;
    };
    interface HTMLSpxTailwindElement extends Components.SpxTailwind, HTMLStencilElement {
    }
    var HTMLSpxTailwindElement: {
        prototype: HTMLSpxTailwindElement;
        new (): HTMLSpxTailwindElement;
    };
    interface HTMLSpxTextPathElement extends Components.SpxTextPath, HTMLStencilElement {
    }
    var HTMLSpxTextPathElement: {
        prototype: HTMLSpxTextPathElement;
        new (): HTMLSpxTextPathElement;
    };
    interface HTMLSpxTypewriterElement extends Components.SpxTypewriter, HTMLStencilElement {
    }
    var HTMLSpxTypewriterElement: {
        prototype: HTMLSpxTypewriterElement;
        new (): HTMLSpxTypewriterElement;
    };
    interface HTMLElementTagNameMap {
        "spx-accordion": HTMLSpxAccordionElement;
        "spx-animate": HTMLSpxAnimateElement;
        "spx-class-toggle": HTMLSpxClassToggleElement;
        "spx-code": HTMLSpxCodeElement;
        "spx-control-color": HTMLSpxControlColorElement;
        "spx-control-group": HTMLSpxControlGroupElement;
        "spx-control-input": HTMLSpxControlInputElement;
        "spx-control-label": HTMLSpxControlLabelElement;
        "spx-control-number": HTMLSpxControlNumberElement;
        "spx-control-select": HTMLSpxControlSelectElement;
        "spx-control-switch": HTMLSpxControlSwitchElement;
        "spx-edit": HTMLSpxEditElement;
        "spx-edit-button": HTMLSpxEditButtonElement;
        "spx-editor": HTMLSpxEditorElement;
        "spx-editor-components": HTMLSpxEditorComponentsElement;
        "spx-editor-container": HTMLSpxEditorContainerElement;
        "spx-editor-content": HTMLSpxEditorContentElement;
        "spx-editor-controls": HTMLSpxEditorControlsElement;
        "spx-editor-header": HTMLSpxEditorHeaderElement;
        "spx-group": HTMLSpxGroupElement;
        "spx-icon": HTMLSpxIconElement;
        "spx-iframe": HTMLSpxIframeElement;
        "spx-image-comparison": HTMLSpxImageComparisonElement;
        "spx-lightbox": HTMLSpxLightboxElement;
        "spx-masonry": HTMLSpxMasonryElement;
        "spx-mockup": HTMLSpxMockupElement;
        "spx-navigation": HTMLSpxNavigationElement;
        "spx-notation": HTMLSpxNotationElement;
        "spx-offset": HTMLSpxOffsetElement;
        "spx-scrollspy": HTMLSpxScrollspyElement;
        "spx-share": HTMLSpxShareElement;
        "spx-slider": HTMLSpxSliderElement;
        "spx-slideshow": HTMLSpxSlideshowElement;
        "spx-tailwind": HTMLSpxTailwindElement;
        "spx-text-path": HTMLSpxTextPathElement;
        "spx-typewriter": HTMLSpxTypewriterElement;
    }
}
declare namespace LocalJSX {
    interface SpxAccordion {
        "classContent"?: string;
        "classContentActive"?: string;
        "classContentInactive"?: string;
        "classContentText"?: string;
        "classContentTextActive"?: string;
        "classContentTextInactive"?: string;
        "classHeader"?: string;
        "classHeaderActive"?: string;
        "classHeaderIcon"?: string;
        "classHeaderIconActive"?: string;
        "classHeaderIconContainer"?: string;
        "classHeaderIconContainerActive"?: string;
        "classHeaderIconContainerInactive"?: string;
        "classHeaderIconInactive"?: string;
        "classHeaderInactive"?: string;
        "classHeaderText"?: string;
        "classHeaderTextActive"?: string;
        "classHeaderTextInactive"?: string;
        /**
          * @css
         */
        "contentColor"?: string;
        /**
          * @css
         */
        "contentFontSize"?: string;
        /**
          * @css
         */
        "contentFontSizeMax"?: number;
        /**
          * @css
         */
        "contentFontSizeMin"?: number;
        /**
          * Content text.
         */
        "contentText"?: string;
        /**
          * Content text tag.
         */
        "contentTextTag"?: string;
        /**
          * Space between header and content.
          * @css
         */
        "gap"?: string;
        /**
          * @css
         */
        "gapMax"?: number;
        /**
          * @css
         */
        "gapMin"?: number;
        /**
          * @css
         */
        "headerColor"?: string;
        /**
          * @css
         */
        "headerFontSize"?: string;
        /**
          * @css
         */
        "headerFontSizeMax"?: number;
        /**
          * @css
         */
        "headerFontSizeMin"?: number;
        /**
          * Gap between header text and icon.
          * @css
         */
        "headerGap"?: string;
        /**
          * @css
         */
        "headerGapMax"?: number;
        /**
          * @css
         */
        "headerGapMin"?: number;
        /**
          * Header text.
         */
        "headerText"?: string;
        /**
          * Header text when component is closed.
         */
        "headerTextOpen"?: string;
        /**
          * Header text tag.
         */
        "headerTextTag"?: string;
        /**
          * Icon.
         */
        "icon"?: string;
        /**
          * Icon transform.
          * @css
         */
        "iconTransform"?: string;
        /**
          * Icon type.
         */
        "iconType"?: string;
        /**
          * Sets the ID to link different accordions together.
         */
        "link"?: string;
        /**
          * Sets the type of link.
          * @choice open, close, toggle
         */
        "linkType"?: string;
        /**
          * [event:loaded]
         */
        "onSpxAccordionDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * State of accordion.
         */
        "openState"?: boolean;
        /**
          * Reverse icon positioning.
         */
        "reverse"?: boolean;
        /**
          * Styling.
          * @choice default, fluid, headless
         */
        "styling"?: string;
    }
    interface SpxAnimate {
        /**
          * Same as opacity but sets visibility to 'hidden' after hitting 0.
         */
        "autoAlpha"?: number;
        /**
          * Clip-path value the animation starts from.
         */
        "clipPath"?: string;
        /**
          * Delay before animation starts.
         */
        "delay"?: number;
        /**
          * Animation duration.
         */
        "duration"?: number;
        /**
          * Ease being used. Accepts all common GSAP options.
         */
        "ease"?: string;
        /**
          * Filter value the animation starts from.
         */
        "filter"?: string;
        /**
          * [event:loaded]
         */
        "onSpxAnimateDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Determines if animation should only play once. (if viewport is true)
         */
        "once"?: boolean;
        /**
          * Opacity level the animation starts from.
         */
        "opacity"?: number;
        /**
          * Repeats the animation. -1 to repeat indefinitely.
         */
        "repeat"?: number;
        /**
          * Time to wait between repetitions.
         */
        "repeatDelay"?: number;
        /**
          * Reverses the animation.
         */
        "reverse"?: boolean;
        /**
          * Amount of time elements should be staggered by.
         */
        "stagger"?: number;
        /**
          * [prop:target]
         */
        "target"?: string;
        /**
          * Starts animation when target is in the viewport.
         */
        "viewport"?: boolean;
        /**
          * Scroll intersection observer root margin.
         */
        "viewportRootMargin"?: string;
        /**
          * Scroll intersection observer threshold.
         */
        "viewportThreshold"?: number;
        /**
          * X position the animation starts from.
         */
        "x"?: any;
        /**
          * Y position the animation starts from.
         */
        "y"?: any;
        /**
          * Causes the animation to go back and forth, alternating backward and forward on each repeat.
         */
        "yoyo"?: boolean;
    }
    interface SpxClassToggle {
        /**
          * If target element should be searched within component or in document.
         */
        "inner"?: boolean;
        /**
          * Specify a local storage item, so the toggle state will be remembered when the user visits the site again.
         */
        "local"?: string;
        /**
          * [event:loaded]
         */
        "onSpxClassToggleDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * [prop:target]
         */
        "target"?: string;
        /**
          * List of classes that should be toggled.
         */
        "toggle"?: string;
    }
    interface SpxCode {
        /**
          * @css
         */
        "background"?: string;
        /**
          * @css
         */
        "borderRadius"?: string;
        /**
          * Enable clipboard button.
         */
        "clipboard"?: boolean;
        /**
          * @css
         */
        "clipboardButtonBackground"?: string;
        /**
          * @css
         */
        "clipboardButtonColor"?: string;
        /**
          * @css
         */
        "clipboardButtonFontSize"?: string;
        /**
          * @css
         */
        "clipboardButtonFontWeight"?: any;
        /**
          * @css
         */
        "clipboardButtonPadding"?: string;
        "clipboardButtonText"?: string;
        "clipboardButtonTextCopied"?: string;
        /**
          * @css
         */
        "clipboardButtonTextTransform"?: string;
        /**
          * Can be used instead of the inner slot.
         */
        "content"?: string;
        /**
          * @css
         */
        "filter"?: string;
        /**
          * @css
         */
        "fontSize"?: string;
        /**
          * @css
         */
        "height"?: string;
        /**
          * Show scrollbar.
         */
        "hideScrollbar"?: boolean;
        /**
          * Load component when it enters the viewport.
         */
        "lazy"?: boolean;
        /**
          * Enable line numbers.
         */
        "lineNumbers"?: boolean;
        /**
          * @css
         */
        "lineNumbersBackground"?: string;
        /**
          * @css
         */
        "lineNumbersColor"?: string;
        /**
          * Start of line number.
         */
        "lineNumbersStart"?: number;
        /**
          * @css
         */
        "maxWidth"?: string;
        /**
          * [event:loaded]
         */
        "onSpxCodeDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * @css
         */
        "overflow"?: string;
        /**
          * @css
         */
        "padding"?: string;
        /**
          * Colour theme.
          * @choice default, dracula
         */
        "theme"?: string;
        /**
          * Determines the programming language.
          * @choice markup, css, js, php, twig, json
         */
        "type"?: string;
        /**
          * Removes all whitespace from the top of the code block.
         */
        "whitespaceLeftTrim"?: boolean;
        /**
          * If the whole code block is indented too much it removes the extra indent.
         */
        "whitespaceRemoveIndent"?: boolean;
        /**
          * Removes trailing whitespace on all lines.
         */
        "whitespaceRemoveTrailing"?: boolean;
        /**
          * Removes all whitespace from the bottom of the code block.
         */
        "whitespaceRightTrim"?: boolean;
    }
    interface SpxControlColor {
        "data"?: string;
        "handleInput"?: Function;
        "label"?: string;
        "value"?: string;
    }
    interface SpxControlGroup {
    }
    interface SpxControlInput {
        "data"?: string;
        "handleInput"?: Function;
        "label"?: string;
        "max"?: number;
        "min"?: number;
        "placeholder"?: string;
        "step"?: number;
        "type"?: string;
        "value"?: string;
    }
    interface SpxControlLabel {
        "label"?: string;
        "mb"?: boolean;
    }
    interface SpxControlNumber {
        "data"?: string;
        "handleInput"?: any;
        "label"?: string;
        "max"?: number;
        "min"?: number;
        "slider"?: boolean;
        "start"?: number;
        "step"?: number;
        "value"?: string;
    }
    interface SpxControlSelect {
        "data"?: string;
        "delimiter"?: string;
        "handleInput"?: Function;
        "label"?: string;
        "options"?: string;
        "value"?: string;
    }
    interface SpxControlSwitch {
        "checked"?: boolean;
        "data"?: string;
        "handleInput"?: Function;
        "label"?: string;
    }
    interface SpxEdit {
        "editable"?: boolean;
        "name"?: string;
        /**
          * @css
         */
        "outline"?: string;
        /**
          * @css
         */
        "outlineFocus"?: string;
        "placeholder"?: string;
        /**
          * @css
         */
        "placeholderColor"?: string;
        /**
          * @css
         */
        "placeholderOpacity"?: string;
        "subfield"?: boolean;
        "text"?: string;
        "type"?: string;
    }
    interface SpxEditButton {
        "background"?: string;
        /**
          * Discard button background.
          * @css
         */
        "backgroundDiscard"?: string;
        "border"?: string;
        "borderDiscard"?: string;
        "borderRadius"?: string;
        "bottom"?: string;
        "classButton"?: string;
        "classButtonDiscard"?: string;
        "classLoader"?: string;
        "color"?: string;
        /**
          * Discard button color.
          * @css
         */
        "colorDiscard"?: string;
        /**
          * Corresponding ID for editable fields. This property is needed when multiple edit-button components are used on the page. Simply apply a "data-spx-edit-id" attribute with the same value to editable elements.
         */
        "editId"?: string;
        "fontSize"?: string;
        "fontSizeMax"?: number;
        "fontSizeMin"?: number;
        /**
          * Gap between the buttons.
          * @css
         */
        "gap"?: string;
        "left"?: string;
        "loaderColor"?: string;
        "loaderGap"?: string;
        /**
          * [event:loaded]
         */
        "onSpxEditButtonDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Fires after pressing the discard button.
         */
        "onSpxEditButtonDiscard"?: (event: CustomEvent<any>) => void;
        /**
          * Fires after pressing the save button.
         */
        "onSpxEditButtonSave"?: (event: CustomEvent<any>) => void;
        "padding"?: string;
        "paddingXMax"?: number;
        "paddingXMin"?: number;
        "paddingYMax"?: number;
        "paddingYMin"?: number;
        /**
          * Position property of component.
         */
        "position"?: | 'fixed'
    | 'absolute'
    | 'relative'
    | 'static';
        "right"?: string;
        /**
          * Styling.
          * @choice default, fluid, headless
         */
        "styling"?: string;
        "test"?: boolean;
        /**
          * Discard button text.
         */
        "textDiscard"?: string;
        /**
          * Edit button text.
         */
        "textEdit"?: string;
        /**
          * Save button text.
         */
        "textSave"?: string;
        "top"?: string;
        "zIndex"?: number;
    }
    interface SpxEditor {
        "height"?: string;
    }
    interface SpxEditorComponents {
    }
    interface SpxEditorContainer {
    }
    interface SpxEditorContent {
    }
    interface SpxEditorControls {
    }
    interface SpxEditorHeader {
    }
    interface SpxGroup {
        "content"?: string;
        /**
          * [event:loaded]
         */
        "onSpxGroupDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * [prop:target]
         */
        "target"?: string;
    }
    interface SpxIcon {
        "color"?: string;
        /**
          * Icon code.
         */
        "icon"?: string;
        /**
          * [event:loaded]
         */
        "onSpxIconDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Icon size.
         */
        "size"?: string;
        "sizeMax"?: number;
        "sizeMin"?: number;
        /**
          * Styling.
          * @choice default, fluid
         */
        "styling"?: string;
        /**
          * Icon type.
          * @choice ionicons, caret
         */
        "type"?: string;
        "width"?: string;
    }
    interface SpxIframe {
        /**
          * Automatically resize iframe to fit content.
         */
        "fit"?: boolean;
        /**
          * Lazy load content.
         */
        "lazy"?: boolean;
        /**
          * @css
         */
        "loaderBackground"?: string;
        /**
          * @css
         */
        "loaderBorderRadius"?: string;
        /**
          * @css
         */
        "loaderColor"?: string;
        /**
          * @css
         */
        "loaderPadding"?: string;
        /**
          * @css
         */
        "minHeight"?: string;
        /**
          * [event:loaded]
         */
        "onSpxIframeDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Screen size of the site shown inside the iframe.
         */
        "size"?: string;
        /**
          * Source for the iframe.
         */
        "src"?: string;
    }
    interface SpxImageComparison {
        "active"?: boolean;
        /**
          * @css
         */
        "color"?: string;
        /**
          * @css
         */
        "height"?: string;
        /**
          * @css
         */
        "iconColor"?: string;
        /**
          * Lazy load images.
         */
        "lazy"?: boolean;
        /**
          * [event:loaded]
         */
        "onSpxImageComparisonDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Image URL of the before image.
         */
        "srcAfter"?: string;
        /**
          * Image URL of the after image.
         */
        "srcBefore"?: string;
        /**
          * Opening state in pixels.
         */
        "start"?: number;
        /**
          * Step amount when using component with arrow keys.
         */
        "steps"?: number;
    }
    interface SpxLightbox {
        /**
          * If 'overflow: hidden' should be applied to the body when a lightbox is open.
         */
        "bodyOverflow"?: boolean;
        /**
          * Show close button.
         */
        "closeButton"?: boolean;
        /**
          * @css
         */
        "closeButtonColor"?: string;
        /**
          * [event:loaded]
         */
        "onSpxLightboxDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * @css
         */
        "overlayBackdropFilter"?: string;
        /**
          * @css
         */
        "overlayBackground"?: string;
        /**
          * [component:spx-slider]
         */
        "spxSlider"?: string;
        /**
          * [prop:target]
         */
        "target"?: string;
    }
    interface SpxMasonry {
        /**
          * Number of columns.
         */
        "columns"?: number;
        /**
          * Gap between images.
          * @css
         */
        "gap"?: string;
        /**
          * WordPress media size when using the helper function.
         */
        "imageSize"?: string;
        /**
          * Gets images from an ACF or Metabox field.
          * @choice acf, mb
         */
        "imageSrc"?: string;
        /**
          * Gets images from an ACF or Metabox field.
          * @helper &lt;?php spxGetImages( $fieldName, $type, $postId ); ?>
          * @function spxGetImages
         */
        "images"?: string;
        /**
          * Lazy load images.
         */
        "lazy"?: boolean;
        /**
          * [event:loaded]
         */
        "onSpxMasonryDidLoad"?: (event: CustomEvent<any>) => void;
    }
    interface SpxMockup {
        /**
          * Samsung S8 color.
          * @choice black, blue
         */
        "colorGalaxyS8"?: string;
        /**
          * Google Pixel color.
          * @choice silver, black, blue
         */
        "colorGooglePixel"?: string;
        /**
          * IPad Pro color.
          * @choice silver, gold, rosegold, spacegray
         */
        "colorIpadPro"?: string;
        /**
          * IPhone 8 color.
          * @choice silver, gold, spacegray
         */
        "colorIphone8"?: string;
        /**
          * MacBook color.
          * @choice silver, gold, rosegold, spacegray
         */
        "colorMacbook"?: string;
        /**
          * MacBook Pro color.
          * @choice silver, spacegray
         */
        "colorMacbookPro"?: string;
        /**
          * @css
         */
        "imagePosition"?: string;
        /**
          * [event:loaded]
         */
        "onSpxMockupDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Mockup size.
         */
        "size"?: number;
        /**
          * Mockup size maximum.
         */
        "sizeMax"?: number;
        /**
          * Mockup size minimum.
         */
        "sizeMin"?: number;
        /**
          * Image src if no inner slot is used.
         */
        "src"?: string;
        /**
          * Device type.
          * @choice iphone-8, iphone-x, google-pixel-2-xl, google-pixel, galaxy-s8, ipad-pro, surface-pro, surface-book, macbook, macbook-pro, surface-studio, imac-pro, apple-watch
         */
        "type"?: string;
    }
    interface SpxNavigation {
        /**
          * @css
         */
        "childBorder"?: string;
        /**
          * Child menu border-radius.
          * @css
         */
        "childBorderRadius"?: string;
        /**
          * Child menu box-shadow.
          * @css
         */
        "childBoxShadow"?: string;
        /**
          * Gap between nested child menus.
          * @css
         */
        "childChildGap"?: string;
        /**
          * Gap between top level menu items and child menus.
          * @css
         */
        "childGap"?: string;
        /**
          * Indicator icon.
         */
        "childIcon"?: string;
        /**
          * Indicator icon type.
         */
        "childIconType"?: string;
        /**
          * Gap between child menu indicator and text.
          * @css
         */
        "childIndicatorGap"?: string;
        /**
          * @css
         */
        "childItemBackground"?: string;
        /**
          * @css
         */
        "childItemBackgroundHover"?: string;
        /**
          * @css
         */
        "childItemColor"?: string;
        /**
          * @css
         */
        "childItemColorHover"?: string;
        /**
          * @css
         */
        "childItemPadding"?: string;
        /**
          * Child menu placement.
          * @css 
          * @choice start, end
         */
        "childPlacement"?: string;
        /**
          * @css
         */
        "fontSize"?: string;
        "isMobile"?: boolean;
        /**
          * Underlines all links.
         */
        "itemUnderline"?: boolean;
        /**
          * Underlines all links on hover.
         */
        "itemUnderlineHover"?: boolean;
        /**
          * Renders a WordPress menu.
          * @helper &lt;?php spxGetNavigation( $menuName ); ?>
          * @function spxGetNavigation
         */
        "menu"?: string;
        /**
          * Mobile breakpoint.
         */
        "mobile"?: number;
        /**
          * Mobile button icon.
         */
        "mobileIcon"?: string;
        /**
          * Mobile button icon type.
         */
        "mobileIconType"?: string;
        /**
          * @css
         */
        "mobileItemBackground"?: string;
        /**
          * @css
         */
        "mobileItemBackgroundHover"?: string;
        /**
          * @css
         */
        "mobileItemColor"?: string;
        /**
          * @css
         */
        "mobileItemColorHover"?: string;
        /**
          * @css
         */
        "mobileItemNestedMarginLeft"?: string;
        /**
          * @css
         */
        "mobileItemPadding"?: string;
        /**
          * Mobile placement.
          * @choice start, end
         */
        "mobilePlacement"?: string;
        /**
          * [event:loaded]
         */
        "onSpxNavigationDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * @css
         */
        "parentItemBackground"?: string;
        /**
          * @css
         */
        "parentItemBackgroundHover"?: string;
        /**
          * @css
         */
        "parentItemColor"?: string;
        /**
          * @css
         */
        "parentItemColorHover"?: string;
        /**
          * Gap between parent menu items.
          * @css
         */
        "parentItemGap"?: string;
        /**
          * @css
         */
        "parentItemPadding"?: string;
        /**
          * Renders menu vertically.
         */
        "vertical"?: boolean;
    }
    interface SpxNotation {
        /**
          * Turn animation on or off when animation.
         */
        "animation"?: boolean;
        /**
          * Animation duration.
         */
        "animationDuration"?: number;
        /**
          * Autoplay.
         */
        "autoplay"?: boolean;
        /**
          * Brackets.
         */
        "brackets"?: string;
        "color"?: string;
        "delay"?: number;
        /**
          * Create a group on annotations by applying a "data-spx-annotation" to elements within.
         */
        "group"?: boolean;
        /**
          * Number of iterations.
         */
        "iterations"?: number;
        /**
          * Annotate multiline text.
         */
        "multiline"?: boolean;
        /**
          * [event:loaded]
         */
        "onSpxNotationDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Padding around notations.
         */
        "padding"?: number;
        /**
          * Stroke width.
         */
        "strokeWidth"?: number;
        /**
          * Type of notation.
          * @choice underline, box, circle, highlight, strike-through, crossed-off, bracket
         */
        "type"?: string;
    }
    interface SpxOffset {
        /**
          * [event:loaded]
         */
        "onSpxOffsetDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * [prop:target]
         */
        "target"?: string;
        /**
          * Add offset as CSS variable to body.
         */
        "variable"?: boolean;
    }
    interface SpxScrollspy {
        /**
          * Applied class to active navigation element.
         */
        "navClass"?: string;
        /**
          * [event:loaded]
         */
        "onSpxScrollspyDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Intersection observer root margin.
         */
        "rootMargin"?: string;
        /**
          * [prop:target]
         */
        "target"?: string;
        /**
          * Intersection observer threshold.
         */
        "threshold"?: number;
        /**
          * Appends the currently active link to the end of the URL.
         */
        "urlChange"?: boolean;
    }
    interface SpxShare {
        /**
          * @css
         */
        "fontSize"?: string;
        /**
          * @css
         */
        "fontSizeMax"?: number;
        /**
          * @css
         */
        "fontSizeMin"?: number;
        /**
          * @css
         */
        "itemBackground"?: string;
        /**
          * @css
         */
        "itemBorderRadius"?: string;
        /**
          * Gap between buttons.
          * @css
         */
        "itemColor"?: string;
        /**
          * Filter hover.
          * @css
         */
        "itemFilterHover"?: string;
        /**
          * Gap between buttons.
          * @css
         */
        "itemGap"?: string;
        /**
          * @css
         */
        "itemGapMax"?: number;
        /**
          * @css
         */
        "itemGapMin"?: number;
        /**
          * @css
         */
        "itemPadding"?: string;
        /**
          * @css
         */
        "itemPaddingMax"?: number;
        /**
          * @css
         */
        "itemPaddingMin"?: number;
        /**
          * @css
         */
        "itemSize"?: string;
        /**
          * @css
         */
        "itemSizeMax"?: number;
        /**
          * @css
         */
        "itemSizeMin"?: number;
        /**
          * [event:loaded]
         */
        "onSpxShareDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Styling.
          * @choice default, fluid
         */
        "styling"?: string;
        /**
          * Link href target.
         */
        "target"?: string;
        /**
          * Button theme.
          * @choice default, outline, minimal
         */
        "theme"?: string;
        /**
          * Render buttons vertically.
         */
        "vertical"?: boolean;
    }
    interface SpxSlider {
        /**
          * Automatically adjusts height of slider.
         */
        "autoheight"?: boolean;
        /**
          * Starts navigating to the next slide when page is loaded.
         */
        "autoplay"?: boolean;
        /**
          * Autoplay delay.
         */
        "autoplayDelay"?: number;
        /**
          * Disable autoplay after interaction with slides.
         */
        "autoplayDisableOnInteraction"?: boolean;
        /**
          * Centers slides in viewport.
         */
        "centeredSlides"?: boolean;
        /**
          * Slider effect.
          * @choice slide, effect
         */
        "effect"?: string;
        /**
          * Space between slides.
         */
        "gap"?: number;
        /**
          * Image object-fit.
          * @choice fill, contain, cover, scale-down, none
         */
        "imageObjectFit"?: string;
        /**
          * WordPress media size when using the helper function.
         */
        "imageSize"?: string;
        /**
          * Gets images from an ACF or Metabox field.
          * @choice acf, mb
         */
        "imageSrc"?: string;
        /**
          * Gets images from an ACF or Metabox field.
          * @helper &lt;?php spxGetImages( $fieldName, $type, $postId ); ?>
          * @function spxGetImages
         */
        "images"?: string;
        /**
          * Lazy load images.
         */
        "lazy"?: boolean;
        /**
          * Amount of images to to be preloaded when lazy is enabled.
         */
        "lazyLoadPrevNext"?: number;
        /**
          * Loops all slides infinitely.
         */
        "loop"?: boolean;
        /**
          * @css
         */
        "maxHeight"?: string;
        "navigation"?: boolean;
        /**
          * @css
         */
        "navigationBackdropFilter"?: string;
        /**
          * @css
         */
        "navigationBackground"?: string;
        /**
          * @css
         */
        "navigationBackgroundHover"?: string;
        /**
          * @css
         */
        "navigationBorderRadius"?: string;
        /**
          * @css
         */
        "navigationColor"?: string;
        /**
          * Navigation distance.
          * @css
         */
        "navigationDistanceX"?: string;
        /**
          * Navigation icon type.
         */
        "navigationIconNext"?: string;
        /**
          * Navigation icon type.
         */
        "navigationIconPrev"?: string;
        /**
          * Navigation icon type.
         */
        "navigationIconType"?: string;
        /**
          * @css
         */
        "navigationPadding"?: string;
        /**
          * Navigation size.
          * @css
         */
        "navigationSize"?: string;
        /**
          * [event:loaded]
         */
        "onSpxSliderDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Pagination type.
          * @choice bullets, none
         */
        "pagination"?: string;
        /**
          * @css
         */
        "paginationBackdropFilter"?: string;
        /**
          * @css
         */
        "paginationBackground"?: string;
        /**
          * @css
         */
        "paginationBulletsBackground"?: string;
        /**
          * @css
         */
        "paginationBulletsBackgroundActive"?: string;
        /**
          * Make bullets clickable.
         */
        "paginationBulletsClickable"?: boolean;
        /**
          * Will only keep a selected amount of bullets visible.
         */
        "paginationBulletsDynamic"?: boolean;
        /**
          * Amount of dynamic bullets.
         */
        "paginationBulletsDynamicAmount"?: number;
        /**
          * Space between the bullets.
          * @css
         */
        "paginationBulletsGap"?: string;
        /**
          * Size of the bullets.
          * @css
         */
        "paginationBulletsSize"?: string;
        /**
          * Filter property for the previous and next elements.
          * @css
         */
        "prevNextFilter"?: string;
        /**
          * Screen reader message for first slide.
         */
        "slideMessageFirst"?: string;
        /**
          * Screen reader message for last slide.
         */
        "slideMessageLast"?: string;
        /**
          * Screen reader message for next slide.
         */
        "slideMessageNext"?: string;
        /**
          * Screen reader message for previous slide.
         */
        "slideMessagePrevious"?: string;
        /**
          * Amount of slides shown at once.
         */
        "slidesPerView"?: number;
        /**
          * Sliding speed.
         */
        "speed"?: number;
        /**
          * At which slide component should start.
         */
        "start"?: number;
    }
    interface SpxSlideshow {
        /**
          * Duration of slideshow to complete one cycle.
          * @css
         */
        "duration"?: string;
        /**
          * Gap between inner elements.
          * @css
         */
        "gap"?: string;
        /**
          * @css
         */
        "height"?: string;
        /**
          * WordPress media size when using the helper function.
         */
        "imageSize"?: string;
        /**
          * Gets images from an ACF or Metabox field.
          * @choice acf, mb
         */
        "imageSrc"?: string;
        /**
          * Gets images from an ACF or Metabox field.
          * @helper &lt;?php spxGetImages( $fieldName, $type, $postId ); ?>
          * @function spxGetImages
         */
        "images"?: string;
        /**
          * Lazy load images.
         */
        "lazy"?: boolean;
        /**
          * Max width of inner elements.
          * @css
         */
        "maxWidth"?: string;
        /**
          * @css
         */
        "objectFit"?: string;
        /**
          * [event:loaded]
         */
        "onSpxSlideshowDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * If not set with this attribute, overflow should be set on the parent element.
          * @css
         */
        "overflow"?: string;
    }
    interface SpxTailwind {
        /**
          * [event:loaded]
         */
        "onSpxTailwindDidLoad"?: (event: CustomEvent<any>) => void;
    }
    interface SpxTextPath {
        /**
          * Space between text and path.
         */
        "gap"?: string;
        /**
          * [event:loaded]
         */
        "onSpxTextPathDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Image src.
         */
        "src"?: string;
        /**
          * Starting offset off the text.
         */
        "startOffset"?: string;
        /**
          * Text to be shown.
         */
        "text"?: string;
        /**
          * @css
         */
        "textColor"?: string;
        /**
          * Text size.
          * @css
         */
        "textFontSize"?: string;
        /**
          * @css
         */
        "textFontWeight"?: string;
        /**
          * Text transform.
          * @css
         */
        "textTransform"?: string;
    }
    interface SpxTypewriter {
        /**
          * Automatically starts writing.
         */
        "autoStart"?: boolean;
        /**
          * Writing delay in ms. Also accepts 'natural' value.
         */
        "delay"?: any;
        /**
          * Delete delay in ms. Also accepts 'natural' value.
         */
        "deleteSpeed"?: any;
        /**
          * Delimiter to use if multiple sentences are going ot be used.
         */
        "delimiter"?: any;
        /**
          * Loops the animation.
         */
        "loop"?: boolean;
        /**
          * [event:loaded]
         */
        "onSpxTypewriterDidLoad"?: (event: CustomEvent<any>) => void;
        /**
          * Text that should be written.
         */
        "text"?: string;
    }
    interface IntrinsicElements {
        "spx-accordion": SpxAccordion;
        "spx-animate": SpxAnimate;
        "spx-class-toggle": SpxClassToggle;
        "spx-code": SpxCode;
        "spx-control-color": SpxControlColor;
        "spx-control-group": SpxControlGroup;
        "spx-control-input": SpxControlInput;
        "spx-control-label": SpxControlLabel;
        "spx-control-number": SpxControlNumber;
        "spx-control-select": SpxControlSelect;
        "spx-control-switch": SpxControlSwitch;
        "spx-edit": SpxEdit;
        "spx-edit-button": SpxEditButton;
        "spx-editor": SpxEditor;
        "spx-editor-components": SpxEditorComponents;
        "spx-editor-container": SpxEditorContainer;
        "spx-editor-content": SpxEditorContent;
        "spx-editor-controls": SpxEditorControls;
        "spx-editor-header": SpxEditorHeader;
        "spx-group": SpxGroup;
        "spx-icon": SpxIcon;
        "spx-iframe": SpxIframe;
        "spx-image-comparison": SpxImageComparison;
        "spx-lightbox": SpxLightbox;
        "spx-masonry": SpxMasonry;
        "spx-mockup": SpxMockup;
        "spx-navigation": SpxNavigation;
        "spx-notation": SpxNotation;
        "spx-offset": SpxOffset;
        "spx-scrollspy": SpxScrollspy;
        "spx-share": SpxShare;
        "spx-slider": SpxSlider;
        "spx-slideshow": SpxSlideshow;
        "spx-tailwind": SpxTailwind;
        "spx-text-path": SpxTextPath;
        "spx-typewriter": SpxTypewriter;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "spx-accordion": LocalJSX.SpxAccordion & JSXBase.HTMLAttributes<HTMLSpxAccordionElement>;
            "spx-animate": LocalJSX.SpxAnimate & JSXBase.HTMLAttributes<HTMLSpxAnimateElement>;
            "spx-class-toggle": LocalJSX.SpxClassToggle & JSXBase.HTMLAttributes<HTMLSpxClassToggleElement>;
            "spx-code": LocalJSX.SpxCode & JSXBase.HTMLAttributes<HTMLSpxCodeElement>;
            "spx-control-color": LocalJSX.SpxControlColor & JSXBase.HTMLAttributes<HTMLSpxControlColorElement>;
            "spx-control-group": LocalJSX.SpxControlGroup & JSXBase.HTMLAttributes<HTMLSpxControlGroupElement>;
            "spx-control-input": LocalJSX.SpxControlInput & JSXBase.HTMLAttributes<HTMLSpxControlInputElement>;
            "spx-control-label": LocalJSX.SpxControlLabel & JSXBase.HTMLAttributes<HTMLSpxControlLabelElement>;
            "spx-control-number": LocalJSX.SpxControlNumber & JSXBase.HTMLAttributes<HTMLSpxControlNumberElement>;
            "spx-control-select": LocalJSX.SpxControlSelect & JSXBase.HTMLAttributes<HTMLSpxControlSelectElement>;
            "spx-control-switch": LocalJSX.SpxControlSwitch & JSXBase.HTMLAttributes<HTMLSpxControlSwitchElement>;
            "spx-edit": LocalJSX.SpxEdit & JSXBase.HTMLAttributes<HTMLSpxEditElement>;
            "spx-edit-button": LocalJSX.SpxEditButton & JSXBase.HTMLAttributes<HTMLSpxEditButtonElement>;
            "spx-editor": LocalJSX.SpxEditor & JSXBase.HTMLAttributes<HTMLSpxEditorElement>;
            "spx-editor-components": LocalJSX.SpxEditorComponents & JSXBase.HTMLAttributes<HTMLSpxEditorComponentsElement>;
            "spx-editor-container": LocalJSX.SpxEditorContainer & JSXBase.HTMLAttributes<HTMLSpxEditorContainerElement>;
            "spx-editor-content": LocalJSX.SpxEditorContent & JSXBase.HTMLAttributes<HTMLSpxEditorContentElement>;
            "spx-editor-controls": LocalJSX.SpxEditorControls & JSXBase.HTMLAttributes<HTMLSpxEditorControlsElement>;
            "spx-editor-header": LocalJSX.SpxEditorHeader & JSXBase.HTMLAttributes<HTMLSpxEditorHeaderElement>;
            "spx-group": LocalJSX.SpxGroup & JSXBase.HTMLAttributes<HTMLSpxGroupElement>;
            "spx-icon": LocalJSX.SpxIcon & JSXBase.HTMLAttributes<HTMLSpxIconElement>;
            "spx-iframe": LocalJSX.SpxIframe & JSXBase.HTMLAttributes<HTMLSpxIframeElement>;
            "spx-image-comparison": LocalJSX.SpxImageComparison & JSXBase.HTMLAttributes<HTMLSpxImageComparisonElement>;
            "spx-lightbox": LocalJSX.SpxLightbox & JSXBase.HTMLAttributes<HTMLSpxLightboxElement>;
            "spx-masonry": LocalJSX.SpxMasonry & JSXBase.HTMLAttributes<HTMLSpxMasonryElement>;
            "spx-mockup": LocalJSX.SpxMockup & JSXBase.HTMLAttributes<HTMLSpxMockupElement>;
            "spx-navigation": LocalJSX.SpxNavigation & JSXBase.HTMLAttributes<HTMLSpxNavigationElement>;
            "spx-notation": LocalJSX.SpxNotation & JSXBase.HTMLAttributes<HTMLSpxNotationElement>;
            "spx-offset": LocalJSX.SpxOffset & JSXBase.HTMLAttributes<HTMLSpxOffsetElement>;
            "spx-scrollspy": LocalJSX.SpxScrollspy & JSXBase.HTMLAttributes<HTMLSpxScrollspyElement>;
            "spx-share": LocalJSX.SpxShare & JSXBase.HTMLAttributes<HTMLSpxShareElement>;
            "spx-slider": LocalJSX.SpxSlider & JSXBase.HTMLAttributes<HTMLSpxSliderElement>;
            "spx-slideshow": LocalJSX.SpxSlideshow & JSXBase.HTMLAttributes<HTMLSpxSlideshowElement>;
            "spx-tailwind": LocalJSX.SpxTailwind & JSXBase.HTMLAttributes<HTMLSpxTailwindElement>;
            "spx-text-path": LocalJSX.SpxTextPath & JSXBase.HTMLAttributes<HTMLSpxTextPathElement>;
            "spx-typewriter": LocalJSX.SpxTypewriter & JSXBase.HTMLAttributes<HTMLSpxTypewriterElement>;
        }
    }
}
