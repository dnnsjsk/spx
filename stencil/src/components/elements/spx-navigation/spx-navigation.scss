$tag: 'spx-navigation';

:host {
  display: setVar($tag, 'display', block);
}

$childBorder: 1px solid var(--spx-color-gray-200);
$childBorderRadius: 0;
$childBoxShadow: 0 3px 10px 0 rgba(0, 0, 0, 0.05);
$childChildGap: 0.8em;
$childGap: 0.5em;
$childIndicatorGap: 0.2em;
$childItemBackground: #ffffff;
$childItemBackgroundHover: var(--spx-color-gray-100);
$childItemColor: var(--spx-color-gray-700);
$childItemColorHover: var(--spx-color-gray-900);
$childItemPadding: 0.6em 0.8em;
$fontSize: clamp(18px, 1.6vw, 20px);
$mobileItemBackground: #ffffff;
$mobileItemBackgroundHover: var(--spx-color-gray-100);
$mobileItemColor: var(--spx-color-gray-800);
$mobileItemColorHover: var(--spx-color-gray-900);
$mobileItemNestedMarginLeft: 0.8em;
$mobileItemPadding: 0.6em;
$parentItemBackground: #ffffff;
$parentItemBackgroundHover: var(--spx-color-gray-100);
$parentItemColor: var(--spx-color-gray-800);
$parentItemColorHover: var(--spx-color-gray-900);
$parentItemGap: 0.4em;
$parentItemPadding: 0.6em;

nav {
  font-family: var(--spx-font-family);
  font-size: variable($tag, 'font-size', $fontSize);

  & > .parent {
    display: grid;

    :host([is-mobile]:not([is-mobile='false'])) & {
      display: none;
    }
  }
}

ul {
  margin: 0;
  padding: 0;
  list-style-type: none;

  ul {
    :host([is-mobile]:not([is-mobile='false'])) & {
      border-left: 1px solid rgba(0, 0, 0, 0.1);
      border-radius: 0 !important;
    }

    :host([vertical]:not([vertical='false'])) & {
      display: grid;
      grid-gap: variable($tag, 'parent-item-gap', $parentItemGap);
    }

    :host([is-mobile]:not([is-mobile='false'])) &,
    :host([vertical]:not([vertical='false'])) & {
      margin-left: variable(
        $tag,
        'mobile-item-nested-margin-left',
        $mobileItemNestedMarginLeft
      );
    }
  }
}

ul ul,
.mobile ul {
  border-radius: variable($tag, 'child-border-radius', $childBorderRadius);
  overflow: hidden;

  :host(:not([is-mobile])) & {
    border: variable($tag, 'child-border', $childBorder);
    box-shadow: variable($tag, 'child-box-shadow', $childBoxShadow);
  }
}

.parent:not(.mobile) > ul {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: max-content;
  grid-gap: variable($tag, 'parent-item-gap', $parentItemGap);

  :host([is-mobile]:not([is-mobile='false'])) &,
  :host([vertical]:not([vertical='false'])) & {
    grid-auto-flow: row;
    grid-auto-rows: max-content;
  }
}

.item--parent {
  a {
    padding: variable($tag, 'parent-item-padding', $parentItemPadding);
    color: variable($tag, 'parent-item-color', $parentItemColor);
    background: variable($tag, 'parent-item-background', $parentItemBackground);

    &:hover {
      color: variable($tag, 'parent-item-color-hover', $parentItemColorHover);
      background: variable(
        $tag,
        'parent-item-background-hover',
        $parentItemBackgroundHover
      );
    }
  }

  &.item--has-child > .child {
    flex-direction: column;

    :host([vertical]:not([vertical='false'])) & {
      margin-top: variable($tag, 'parent-item-gap', $parentItemGap);
    }

    a {
      display: flex;
      justify-content: space-between;
      width: 100%;
      white-space: nowrap;

      :host(:not([is-mobile])) & {
        padding: variable($tag, 'child-item-padding', $childItemPadding);
        color: variable($tag, 'child-item-color', $childItemColor);
        background: variable($tag, 'child-item-background', $childItemBackground);

        &:hover {
          color: variable($tag, 'child-item-color-hover', $childItemColorHover);
          background: variable(
            $tag,
            'child-item-background-hover',
            $childItemBackgroundHover
          );
        }
      }
    }

    &:before {
      content: '';
      position: relative;
      width: 100%;
      display: block;
      min-height: variable($tag, 'child-gap', $childGap);

      :host([is-mobile]:not([is-mobile='false'])) &,
      :host([vertical]:not([vertical='false'])) & {
        display: none;
      }
    }
  }
}

.child,
.mobile {
  display: flex;
  transition-property: opacity;
  transition-duration: var(--spx-transition-duration);
  transition-timing-function: var(--spx-transition-timing-function);
  pointer-events: none;
  opacity: 0;
  position: absolute;
  flex-direction: row;

  :host([vertical]:not([vertical='false'])) & {
    pointer-events: auto;
    opacity: 1;
    position: relative;
  }

  :host([is-mobile]:not([is-mobile='false'])) & {
    flex-direction: column;
  }
}

.mobile .child {
  position: relative;
}

li:hover > .child,
li:focus-within > .child,
.mobile__button:hover .mobile,
.mobile__button:focus-within .mobile,
.mobile__button:hover .child,
.mobile__button:focus-within .child {
  opacity: 1;
  pointer-events: auto;
  transform: translateY(0px);
}

.item--child {
  a {
    padding: variable($tag, 'child-item-padding', $childItemPadding);
  }

  [data-popper-placement='left-start'] {
    flex-direction: row-reverse;
  }

  [data-popper-placement]::before {
    content: ' ';
    position: relative;
    height: 100%;
    display: block;
    min-width: variable($tag, 'child-child-gap', $childChildGap);

    :host([is-mobile]:not([is-mobile='false'])) &,
    :host([vertical]:not([vertical='false'])) & {
      display: none;
    }
  }
}

li {
  position: relative;
  flex-direction: row;

  :host(:not([is-mobile]):not([is-mobile='false']):not([vertical]):not([is-vertical='false']))
    & {
    display: flex;
  }
}

a {
  display: inline-grid;
  grid-auto-flow: column;
  align-items: center;
  width: 100%;
  font-size: inherit;
  grid-column-gap: variable($tag, 'child-indicator-gap', $childIndicatorGap);
  text-decoration: none;
  @include focus;
  transition-property: color, background, box-shadow;

  :host([item-underline]) & {
    text-decoration: underline;
  }

  :host([item-underline-hover]) & {
    &:hover {
      text-decoration: underline;
    }
  }
}

.mobile__button {
  cursor: pointer;
  max-width: fit-content;
  grid-gap: 0.4em;
  grid-auto-flow: column;
  align-items: center;
  padding: variable($tag, 'parent-item-padding', $parentItemPadding);
  color: variable($tag, 'parent-item-color', $parentItemColor);
  background: variable($tag, 'parent-item-background', $parentItemBackground);
  display: none;

  :host([is-mobile]:not([is-mobile='false'])) & {
    display: grid;
  }

  a {
    box-sizing: border-box;
    padding: variable($tag, 'mobile-item-padding', $mobileItemPadding);
    color: variable($tag, 'mobile-item-color', $mobileItemColor);
    background: variable($tag, 'mobile-item-background', $mobileItemBackground);

    & > ul {
      background: variable($tag, 'child-item-background', $childItemBackground);
      border: variable($tag, 'child-border', $childBorder);
      box-shadow: variable($tag, 'child-box-shadow', $childBoxShadow);
    }

    &:hover {
      color: variable($tag, 'mobile-item-color-hover', $mobileItemColorHover);
      background: variable(
        $tag,
        'mobile-item-background-hover',
        $mobileItemBackgroundHover
      );
    }

    &::before {
      content: '';
      position: relative;
      display: none;
      width: 100%;
      min-height: variable($tag, 'child-gap', $childGap);
    }
  }
}
